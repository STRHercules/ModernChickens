--- a/com/mojang/blaze3d/systems/RenderSystem.java
+++ b/com/mojang/blaze3d/systems/RenderSystem.java
@@ -94,6 +_,7 @@
     @Nullable
     private static DynamicUniforms dynamicUniforms;
     private static ScissorState scissorStateForRenderTypeDraws = new ScissorState();
+    private static final net.neoforged.neoforge.client.pipeline.PipelineModifierStack PIPELINE_MODIFIERS = new net.neoforged.neoforge.client.pipeline.PipelineModifierStack();
 
     public static void initRenderThread() {
         if (renderThread != null) {
@@ -207,7 +_,7 @@
     public static void initRenderer(
         long p_409720_, int p_69581_, boolean p_69582_, BiFunction<ResourceLocation, ShaderType, String> p_410113_, boolean p_410401_
     ) {
-        DEVICE = new GlDevice(p_409720_, p_69581_, p_69582_, p_410113_, p_410401_);
+        DEVICE = net.neoforged.neoforge.client.ClientHooks.createGpuDevice(p_409720_, p_69581_, p_69582_, p_410113_, p_410401_);
         apiDescription = getDevice().getImplementationInformation();
         dynamicUniforms = new DynamicUniforms();
     }
@@ -381,6 +_,40 @@
         if (gpubufferslice2 != null) {
             p_418212_.setUniform("Lighting", gpubufferslice2);
         }
+    }
+
+    /**
+     * Neo: Push the provided {@link net.neoforged.neoforge.client.pipeline.PipelineModifier PipelineModifier} to be applied to subsequent rendering.
+     * <p>
+     * Must be paired with a corresponding {@link #popPipelineModifier()} call after flushing the used buffers
+     */
+    public static void pushPipelineModifier(net.minecraft.resources.ResourceKey<net.neoforged.neoforge.client.pipeline.PipelineModifier> modifier) {
+        PIPELINE_MODIFIERS.push(modifier);
+    }
+
+    /**
+     * Neo: Pop the last {@link net.neoforged.neoforge.client.pipeline.PipelineModifier PipelineModifier} off the modifier stack
+     */
+    public static void popPipelineModifier() {
+        PIPELINE_MODIFIERS.pop();
+    }
+
+    /**
+     * Neo: Run the provided {@link Runnable} with the provided {@link net.neoforged.neoforge.client.pipeline.PipelineModifier PipelineModifier} applied
+     * to the pipelines used by the rendering done in the {@link Runnable}
+     */
+    public static void renderWithPipelineModifier(net.minecraft.resources.ResourceKey<net.neoforged.neoforge.client.pipeline.PipelineModifier> modifier, Runnable renderTask) {
+        PIPELINE_MODIFIERS.renderWithModifier(modifier, renderTask);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static com.mojang.blaze3d.pipeline.RenderPipeline applyPipelineModifiers(com.mojang.blaze3d.pipeline.RenderPipeline pipeline) {
+        return PIPELINE_MODIFIERS.apply(pipeline);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static void ensurePipelineModifiersEmpty() {
+        PIPELINE_MODIFIERS.ensureEmpty();
     }
 
     @OnlyIn(Dist.CLIENT)
