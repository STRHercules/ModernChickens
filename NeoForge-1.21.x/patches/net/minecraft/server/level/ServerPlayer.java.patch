--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -321,6 +_,10 @@
         }
 
         private void broadcastDataValue(AbstractContainerMenu p_143455_, int p_143456_, int p_143457_) {
+            if (ServerPlayer.this.connection.hasChannel(net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload.TYPE)) {
+                ServerPlayer.this.connection.send(new net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload((byte) p_143455_.containerId, (short) p_143456_, p_143457_));
+                return;
+            }
             ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(p_143455_.containerId, p_143456_, p_143457_));
         }
 
@@ -372,6 +_,7 @@
     private Set<DebugSubscription<?>> requestedDebugSubscriptions = Set.of();
     private int containerCounter;
     public boolean wonGame;
+    private long lastDayTimeTick = -1L; // Neo: Used to limit TIME_SINCE_REST increases when day length is non-standard. No need to persist, at most Phantoms will spawn one tick too early for each save/load cycle.
 
     public ServerPlayer(MinecraftServer p_254143_, ServerLevel p_254435_, GameProfile p_253651_, ClientInformation p_301997_) {
         super(p_254435_, p_253651_);
@@ -664,7 +_,11 @@
                 }
 
                 if (!this.isSleeping()) {
-                    this.awardStat(Stats.TIME_SINCE_REST);
+                    // Neo: Advance TIME_SINCE_REST if (a) vanilla daytime handling in effect, or (b) days are shorter, or (c) dayTime has ticked, or (d) dayTime advances are off and we need to ignore day length
+                    if (level().getDayTimeFraction() < 0 || level().getDayTimeFraction() >= 1 || lastDayTimeTick != level().getDayTime() || !level().getGameRules().getRule(GameRules.RULE_DAYLIGHT).get()) {
+                        lastDayTimeTick = level().getDayTime();
+                        this.awardStat(Stats.TIME_SINCE_REST);
+                    }
                 }
             }
 
@@ -719,6 +_,11 @@
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
+            if (this.getAbilities().flying && !this.mayFly()) {
+                this.getAbilities().flying = false;
+                this.onUpdateAbilities();
+            }
+
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
@@ -732,7 +_,7 @@
 
     private void synchronizeSpecialItemUpdates(ItemStack p_372884_) {
         MapId mapid = p_372884_.get(DataComponents.MAP_ID);
-        MapItemSavedData mapitemsaveddata = MapItem.getSavedData(mapid, this.level());
+        MapItemSavedData mapitemsaveddata = MapItem.getSavedData(p_372884_, this.level());
         if (mapitemsaveddata != null) {
             Packet<?> packet = mapitemsaveddata.getUpdatePacket(mapid, this);
             if (packet != null) {
@@ -881,6 +_,7 @@
     @Override
     public void die(DamageSource p_9035_) {
         this.gameEvent(GameEvent.ENTITY_DIE);
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_9035_)) return;
         boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (flag) {
             Component component = this.getCombatTracker().getDeathMessage();
@@ -1067,7 +_,7 @@
             return BedBlock.findStandUpPosition(EntityType.PLAYER, p_348505_, blockpos, blockstate.getValue(BedBlock.FACING), f)
                 .map(p_450850_ -> ServerPlayer.RespawnPosAngle.of(p_450850_, blockpos, 0.0F));
         } else if (!flag) {
-            return Optional.empty();
+            return blockstate.getRespawnPosition(EntityType.PLAYER, p_348505_, blockpos, f);
         } else {
             boolean flag1 = block.isPossibleToRespawnInThis(blockstate);
             BlockState blockstate1 = p_348505_.getBlockState(blockpos.above());
@@ -1090,6 +_,7 @@
 
     @Nullable
     public ServerPlayer teleport(TeleportTransition p_379854_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, p_379854_.newLevel().dimension())) return null;
         if (this.isRemoved()) {
             return null;
         } else {
@@ -1117,7 +_,7 @@
                 PlayerList playerlist = this.server.getPlayerList();
                 playerlist.sendPlayerPermissionLevel(this);
                 serverlevel1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-                this.unsetRemoved();
+                this.revive();
                 ProfilerFiller profilerfiller = Profiler.get();
                 profilerfiller.push("moving");
                 if (resourcekey == Level.OVERWORLD && serverlevel.dimension() == Level.NETHER) {
@@ -1137,11 +_,15 @@
                 playerlist.sendLevelInfo(this, serverlevel);
                 playerlist.sendAllPlayerInfo(this);
                 playerlist.sendActivePlayerEffects(this);
+                // TODO 1.21: Play custom teleport sound
                 p_379854_.postTeleportTransition().onTransition(this);
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
                 this.teleportSpectators(p_379854_, serverlevel1);
+                // Neo: On the client all attachments are lost on dimension change and need to be re-sent
+                net.neoforged.neoforge.attachment.AttachmentSync.syncInitialPlayerAttachments(this);
+                net.neoforged.neoforge.event.EventHooks.firePlayerChangedDimensionEvent(this, resourcekey, p_379854_.newLevel().dimension());
                 return this;
             }
         }
@@ -1183,6 +_,15 @@
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
+        // Neo: Encapsulate the vanilla check logic to supply to the CanPlayerSleepEvent
+        var vanillaResult = ((java.util.function.Supplier<Either<BedSleepingProblem, Unit>>) () -> {
+        // Guard against modded beds that may not have the FACING property.
+        // We just return success (Unit) here. Modders will need to implement conditions in the CanPlayerSleepEvent
+        if (!this.level().getBlockState(p_9115_).hasProperty(HorizontalDirectionalBlock.FACING)) {
+            return Either.right(Unit.INSTANCE);
+        }
+
+        // Start vanilla code
         Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
             return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
@@ -1213,7 +_,21 @@
                         return Either.left(Player.BedSleepingProblem.NOT_SAFE);
                     }
                 }
-
+        // End vanilla code
+            }
+        }
+        return Either.right(Unit.INSTANCE);
+        }).get();
+
+        // Fire the event. Return the error if one exists after the event, otherwise use the vanilla logic to start sleeping.
+        vanillaResult = net.neoforged.neoforge.event.EventHooks.canPlayerStartSleeping(this, p_9115_, vanillaResult);
+        if (vanillaResult.left().isPresent()) {
+            return vanillaResult;
+        }
+
+        {
+            {
+                // Start vanilla code
                 Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight(p_9029_ -> {
                     this.awardStat(Stats.SLEEP_IN_BED);
                     CriteriaTriggers.SLEPT_IN_BED.trigger(this);
@@ -1235,6 +_,7 @@
     }
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
+        if (p_9118_ == null) return false;
         return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
     }
 
@@ -1316,11 +_,19 @@
 
     @Override
     public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
+        return openMenu(p_9033_, (java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf>) null);
+    }
+
+    @Override
+    public OptionalInt openMenu(@Nullable MenuProvider p_9033_, @Nullable java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf> extraDataWriter) {
         if (p_9033_ == null) {
             return OptionalInt.empty();
         } else {
             if (this.containerMenu != this.inventoryMenu) {
+                if (p_9033_.shouldTriggerClientSideContainerClosingOnOpen())
                 this.closeContainer();
+                else
+                    this.doCloseContainer();
             }
 
             this.nextContainerCounter();
@@ -1332,10 +_,32 @@
 
                 return OptionalInt.empty();
             } else {
+                // Neo: Support sending additional arbitrary data to menu factories on the client-side
+                var extraData = net.neoforged.neoforge.common.util.FriendlyByteBufUtil.writeCustomData(
+                        buffer -> {
+                            p_9033_.writeClientSideData(abstractcontainermenu, buffer);
+                            if (extraDataWriter != null) {
+                                extraDataWriter.accept(buffer);
+                            }
+                        },
+                        registryAccess()
+                );
+                if (extraData.length != 0) {
+                    this.connection.send(
+                        new net.neoforged.neoforge.network.payload.AdvancedOpenScreenPayload(
+                            abstractcontainermenu.containerId,
+                            abstractcontainermenu.getType(),
+                            p_9033_.getDisplayName(),
+                            extraData
+                        )
+                    );
+                } else {
                 this.connection
                     .send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
+                }
                 this.initMenu(abstractcontainermenu);
                 this.containerMenu = abstractcontainermenu;
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1357,6 +_,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, i, p_9059_.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_, i);
         this.initMenu(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
     }
 
     @Override
@@ -1385,6 +_,7 @@
     public void doCloseContainer() {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Close(this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1611,6 +_,15 @@
         this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
         this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
         this.setLastDeathLocation(p_9016_.getLastDeathLocation());
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        var old = p_9016_.getPersistentData();
+        if (old.contains(PERSISTED_NBT_TAG))
+             getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+        net.neoforged.neoforge.event.EventHooks.onPlayerClone(this, p_9016_, !p_9017_);
+        this.tabListHeader = p_9016_.tabListHeader;
+        this.tabListFooter = p_9016_.tabListFooter;
     }
 
     @Override
@@ -1714,6 +_,8 @@
 
     public boolean setGameMode(GameType p_143404_) {
         boolean flag = this.isSpectator();
+        p_143404_ = net.neoforged.neoforge.common.CommonHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), p_143404_);
+        if (p_143404_ == null) return false;
         if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
             return false;
         } else {
@@ -1884,6 +_,7 @@
     public void setCamera(@Nullable Entity p_9214_) {
         Entity entity = this.getCamera();
         this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+        while (this.camera instanceof net.neoforged.neoforge.entity.PartEntity<?> partEntity) this.camera = partEntity.getParent(); // Neo: fix MC-46486
         if (entity != this.camera) {
             if (this.camera.level() instanceof ServerLevel serverlevel) {
                 this.teleportTo(serverlevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot(), false);
@@ -1920,7 +_,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        if (!this.hasTabListName) {
+            this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+            this.hasTabListName = true;
+        }
+        return this.tabListDisplayName;
     }
 
     public int getTabListOrder() {
@@ -1955,6 +_,7 @@
     }
 
     public void setRespawnPosition(@Nullable ServerPlayer.RespawnConfig p_405460_, boolean p_9162_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPlayerSpawnSet(this, p_405460_)) return;
         if (p_9162_ && p_405460_ != null && !p_405460_.isSamePosition(this.respawnConfig)) {
             this.sendSystemMessage(SPAWN_SET_MESSAGE);
         }
@@ -2009,6 +_,75 @@
         return itementity;
     }
 
+    /**
+     * Returns the language last reported by the player as their local language.
+     * Defaults to en_us if the value is unknown.
+     */
+    public String getLanguage() {
+        return this.language;
+    }
+
+    private Component tabListHeader = Component.empty();
+    private Component tabListFooter = Component.empty();
+
+    public Component getTabListHeader() {
+        return this.tabListHeader;
+    }
+
+    /**
+     * Set the tab list header while preserving the footer.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeader(final Component header) {
+        this.setTabListHeaderFooter(header, this.tabListFooter);
+    }
+
+    public Component getTabListFooter() {
+        return this.tabListFooter;
+    }
+
+    /**
+     * Set the tab list footer while preserving the header.
+     *
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListFooter(final Component footer) {
+        this.setTabListHeaderFooter(this.tabListHeader, footer);
+    }
+
+    /**
+     * Set the tab list header and footer at once.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeaderFooter(final Component header, final Component footer) {
+        if (java.util.Objects.equals(header, this.tabListHeader)
+                && java.util.Objects.equals(footer, this.tabListFooter)) {
+            return;
+        }
+
+        this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+        this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+        this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+    }
+
+    // We need this as tablistDisplayname may be null even if the event was fired.
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
+    /**
+     * Force the name displayed in the tab list to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+     */
+    public void refreshTabListName() {
+        Component oldName = this.tabListDisplayName;
+        this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+        if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+            this.server.getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
     public TextFilter getTextFilter() {
         return this.textFilter;
     }
@@ -2060,11 +_,14 @@
 
     public boolean drop(boolean p_182295_) {
         Inventory inventory = this.getInventory();
+        ItemStack selected = inventory.getSelectedItem();
+        if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_182295_ || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
         ItemStack itemstack = inventory.removeFromSelected(p_182295_);
         this.containerMenu
             .findSlot(inventory, inventory.getSelectedSlot())
             .ifPresent(p_401732_ -> this.containerMenu.setRemoteSlot(p_401732_, inventory.getSelectedItem()));
-        return this.drop(itemstack, false, true) != null;
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, itemstack, false, true) != null;
     }
 
     @Override
