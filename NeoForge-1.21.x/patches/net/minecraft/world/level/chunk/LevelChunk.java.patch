--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -155,6 +_,7 @@
         this.setAllStarts(p_196851_.getAllStarts());
         this.setAllReferences(p_196851_.getAllReferences());
 
+        net.neoforged.neoforge.attachment.AttachmentInternals.copyChunkAttachmentsOnPromotion(p_196850_.registryAccess(), p_196851_.getAttachmentHolder(), this.getAttachmentHolder());
         for (Entry<Heightmap.Types, Heightmap> entry : p_196851_.getHeightmaps()) {
             if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
                 this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
@@ -292,7 +_,7 @@
                     this.level.getChunkSource().onSectionEmptinessChanged(this.chunkPos.x, SectionPos.blockToSectionCoord(i), this.chunkPos.z, flag1);
                 }
 
-                if (LightEngine.hasDifferentLightProperties(blockstate, p_62866_)) {
+                if (LightEngine.hasDifferentLightProperties(this, p_62865_, blockstate, p_62866_)) {
                     ProfilerFiller profilerfiller = Profiler.get();
                     profilerfiller.push("updateSkyLightSources");
                     this.skyLightSources.update(this, j, i, l);
@@ -322,7 +_,7 @@
                 if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide() && (p_393859_ & 512) == 0) {
+                    if (!this.level.isClientSide() && !this.level.captureBlockSnapshots && (p_393859_ & 512) == 0) {
                         p_62866_.onPlace(this.level, p_62865_, blockstate, flag2);
                     }
 
@@ -377,6 +_,10 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
         BlockEntity blockentity = this.blockEntities.get(p_62868_);
+        if (blockentity != null && blockentity.isRemoved()) {
+            blockEntities.remove(p_62868_);
+            blockentity = null;
+        }
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
             if (compoundtag != null) {
@@ -394,9 +_,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(p_62868_);
-            return null;
         }
 
         return blockentity;
@@ -411,6 +_,7 @@
 
             this.level.onBlockEntityAdded(p_156391_);
             this.updateBlockEntityTicker(p_156391_);
+            this.level.addFreshBlockEntities(java.util.List.of(p_156391_));
         }
     }
 
@@ -454,6 +_,7 @@
             BlockEntity blockentity = this.blockEntities.put(blockpos.immutable(), p_156374_);
             if (blockentity != null && blockentity != p_156374_) {
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(blockpos);
             }
         }
     }
@@ -463,9 +_,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_, HolderLookup.Provider p_323699_) {
         BlockEntity blockentity = this.getBlockEntity(p_62932_);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata(this.level.registryAccess());
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
             if (compoundtag != null) {
@@ -488,6 +_,7 @@
                 }
 
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(p_62919_);
             }
         }
 
@@ -545,7 +_,7 @@
                 (p_421432_, p_421433_, p_421434_) -> {
                     BlockEntity blockentity = this.getBlockEntity(p_421432_, LevelChunk.EntityCreationType.IMMEDIATE);
                     if (blockentity != null && p_421434_ != null && blockentity.getType() == p_421433_) {
-                        blockentity.loadWithComponents(
+                        blockentity.handleUpdateTag(
                             TagValueInput.create(problemreporter$scopedcollector.forChild(blockentity.problemPath()), this.level.registryAccess(), p_421434_)
                         );
                     }
@@ -685,6 +_,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
@@ -692,6 +_,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_427220_ -> {
             if (this.level instanceof ServerLevel serverlevel) {
                 this.addGameEventListener(p_427220_, serverlevel);
@@ -744,6 +_,19 @@
         return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
     }
 
+    // Neo: Threadsafe lighting system for BlockEntities that change lighting based on dynamic data changing.
+    private final net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager auxLightManager = new net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager(this);
+
+    @Override
+    public net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager getAuxLightManager(ChunkPos pos) {
+        return auxLightManager;
+    }
+
+    @Override
+    public final void syncData(net.neoforged.neoforge.attachment.AttachmentType<?> type) {
+        net.neoforged.neoforge.attachment.AttachmentSync.syncChunkUpdate(this, getAttachmentHolder(), type);
+    }
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
@@ -761,6 +_,7 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = Profiler.get();
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
@@ -782,7 +_,15 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                        if (net.neoforged.neoforge.common.config.NeoForgeServerConfig.INSTANCE.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
+                    } finally {
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackEnd(blockEntity);
                     }
                 }
             }
