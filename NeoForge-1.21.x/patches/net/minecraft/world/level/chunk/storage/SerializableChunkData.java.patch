--- a/net/minecraft/world/level/chunk/storage/SerializableChunkData.java
+++ b/net/minecraft/world/level/chunk/storage/SerializableChunkData.java
@@ -92,7 +_,9 @@
     List<SerializableChunkData.SectionData> sectionData,
     List<CompoundTag> entities,
     List<CompoundTag> blockEntities,
-    CompoundTag structureData
+    CompoundTag structureData,
+    @Nullable CompoundTag attachmentData,
+    @Nullable ListTag auxLightData
 ) {
     private static final Codec<List<SavedTick<Block>>> BLOCK_TICKS_CODEC = SavedTick.codec(BuiltInRegistries.BLOCK.byNameCodec()).listOf();
     private static final Codec<List<SavedTick<Fluid>>> FLUID_TICKS_CODEC = SavedTick.codec(BuiltInRegistries.FLUID.byNameCodec()).listOf();
@@ -108,6 +_,33 @@
     public static final String BLOCK_LIGHT_TAG = "BlockLight";
     public static final String SKY_LIGHT_TAG = "SkyLight";
 
+    /**
+     * @deprecated Neo: use constructor with additional data instead
+     */
+    @Deprecated
+    SerializableChunkData(
+            PalettedContainerFactory containerFactory,
+            ChunkPos chunkPos,
+            int minSectionY,
+            long lastUpdateTime,
+            long inhabitedTime,
+            ChunkStatus chunkStatus,
+            @Nullable BlendingData.Packed blendingData,
+            @Nullable BelowZeroRetrogen belowZeroRetrogen,
+            UpgradeData upgradeData,
+            @Nullable long[] carvingMask,
+            Map<Heightmap.Types, long[]> heightmaps,
+            ChunkAccess.PackedTicks packedTicks,
+            ShortList[] postProcessingSections,
+            boolean lightCorrect,
+            List<SerializableChunkData.SectionData> sectionData,
+            List<CompoundTag> entities,
+            List<CompoundTag> blockEntities,
+            CompoundTag structureData
+    ) {
+        this(containerFactory, chunkPos, minSectionY, lastUpdateTime, inhabitedTime, chunkStatus, blendingData, belowZeroRetrogen, upgradeData, carvingMask, heightmaps, packedTicks, postProcessingSections, lightCorrect, sectionData, entities, blockEntities, structureData, null, null);
+    }
+
     @Nullable
     public static SerializableChunkData parse(LevelHeightAccessor p_361938_, PalettedContainerFactory p_447248_, CompoundTag p_362040_) {
         if (p_362040_.getString("Status").isEmpty()) {
@@ -185,6 +_,9 @@
                 }
             }
 
+            CompoundTag attachmentData = p_362040_.getCompound(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY).orElse(null);
+            ListTag auxLightData = p_362040_.getList(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY).orElse(null);
+
             return new SerializableChunkData(
                 p_447248_,
                 chunkpos,
@@ -203,7 +_,9 @@
                 list2,
                 list3,
                 list4,
-                compoundtag1
+                compoundtag1,
+                attachmentData,
+                auxLightData
             );
         }
     }
@@ -263,6 +_,9 @@
                 postLoadChunk(p_360452_, this.entities, this.blockEntities),
                 BlendingData.unpack(this.blendingData)
             );
+            if (this.auxLightData != null) {
+                ((LevelChunk) chunkaccess).getAuxLightManager(chunkPos).deserializeNBT(this.auxLightData);
+            }
         } else {
             ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(this.packedTicks.blocks());
             ProtoChunkTicks<Fluid> protochunkticks1 = ProtoChunkTicks.load(this.packedTicks.fluids());
@@ -308,6 +_,10 @@
             chunkaccess.addPackedPostProcess(this.postProcessingSections[j], j);
         }
 
+        if (this.attachmentData != null) {
+            chunkaccess.readAttachmentsFromNBT(p_360452_.registryAccess(), this.attachmentData);
+        }
+
         if (chunktype == ChunkType.LEVELCHUNK) {
             return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
         } else {
@@ -391,6 +_,18 @@
             CompoundTag compoundtag1 = packStructureData(
                 StructurePieceSerializationContext.fromLevel(p_365319_), chunkpos, p_362284_.getAllStarts(), p_362284_.getAllReferences()
             );
+
+            CompoundTag attachmentData = null;
+            try {
+                attachmentData = p_362284_.writeAttachmentsToNBT(p_365319_.registryAccess());
+            } catch (Exception exception) {
+                LOGGER.error("Failed to write chunk attachments. An attachment has likely thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+            }
+            ListTag auxLightData = null;
+            if (p_362284_ instanceof LevelChunk levelChunk) {
+                auxLightData = levelChunk.getAuxLightManager(chunkpos).serializeNBT();
+            }
+
             return new SerializableChunkData(
                 p_365319_.palettedContainerFactory(),
                 chunkpos,
@@ -409,7 +_,9 @@
                 list,
                 list2,
                 list1,
-                compoundtag1
+                compoundtag1,
+                attachmentData,
+                auxLightData
             );
         }
     }
@@ -477,6 +_,14 @@
         this.heightmaps.forEach((p_362472_, p_363515_) -> compoundtag2.put(p_362472_.getSerializationKey(), new LongArrayTag(p_363515_)));
         compoundtag.put("Heightmaps", compoundtag2);
         compoundtag.put("structures", this.structureData);
+
+        if (attachmentData != null) {
+            compoundtag.put(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY, attachmentData);
+        }
+        if (auxLightData != null) {
+            compoundtag.put(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, auxLightData);
+        }
+
         return compoundtag;
     }
 
