--- a/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -73,6 +_,7 @@
     private boolean wasModded;
     private final Set<String> removedFeatureFlags;
     private final TimerQueue<MinecraftServer> scheduledEvents;
+    private boolean confirmedExperimentalWarning = false;
 
     private PrimaryLevelData(
         @Nullable CompoundTag p_277888_,
@@ -165,7 +_,7 @@
         Dynamic<T> p_78531_, LevelSettings p_78535_, PrimaryLevelData.SpecialWorldProperty p_250651_, WorldOptions p_251864_, Lifecycle p_78538_
     ) {
         long i = p_78531_.get("Time").asLong(0L);
-        return new PrimaryLevelData(
+        PrimaryLevelData result = new PrimaryLevelData(
             p_78531_.get("Player").flatMap(CompoundTag.CODEC::parse).result().orElse(null),
             p_78531_.get("WasModded").asBoolean(false),
             p_78531_.get("spawn").read(LevelData.RespawnData.CODEC).result().orElse(LevelData.RespawnData.DEFAULT),
@@ -187,7 +_,8 @@
                 .asStream()
                 .flatMap(p_338118_ -> p_338118_.asString().result().stream())
                 .collect(Collectors.toCollection(Sets::newLinkedHashSet)),
-            p_78531_.get("removed_features").asStream().flatMap(p_338117_ -> p_338117_.asString().result().stream()).collect(Collectors.toSet()),
+            // Neo: Append removed modded feature flags
+            updateRemovedFeatureFlags(p_78531_.get("removed_features").asStream().flatMap(p_338117_ -> p_338117_.asString().result().stream()), p_78531_.get("enabled_features").asStream().flatMap(features -> features.asString().result().stream())).collect(Collectors.toSet()),
             new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, p_78531_.get("ScheduledEvents").asStream()),
             (CompoundTag)p_78531_.get("CustomBossEvents").orElseEmptyMap().getValue(),
             p_78531_.get("DragonFight").read(EndDragonFight.Data.CODEC).resultOrPartial(LOGGER::error).orElse(EndDragonFight.Data.DEFAULT),
@@ -195,7 +_,11 @@
             p_251864_,
             p_250651_,
             p_78538_
-        );
+        ).withConfirmedWarning(p_78538_ != Lifecycle.stable() && p_78531_.get("confirmedExperimentalSettings").asBoolean(false));
+        // Neo:
+        result.setDayTimeFraction(p_78531_.get("neoDayTimeFraction").asFloat(0f));
+        result.setDayTimePerTick(p_78531_.get("neoDayTimePerTick").asFloat(-1f));
+        return result;
     }
 
     @Override
@@ -260,6 +_,12 @@
         p_78547_.putInt("WanderingTraderSpawnDelay", this.wanderingTraderSpawnDelay);
         p_78547_.putInt("WanderingTraderSpawnChance", this.wanderingTraderSpawnChance);
         p_78547_.storeNullable("WanderingTraderId", UUIDUtil.CODEC, this.wanderingTraderId);
+
+        // Neo:
+        p_78547_.putString("forgeLifecycle", net.neoforged.neoforge.common.CommonHooks.encodeLifecycle(this.settings.getLifecycle()));
+        p_78547_.putBoolean("confirmedExperimentalSettings", this.confirmedExperimentalWarning);
+        p_78547_.putFloat("neoDayTimeFraction", dayTimeFraction);
+        p_78547_.putFloat("neoDayTimePerTick", dayTimePerTick);
     }
 
     private static ListTag stringCollectionToTag(Set<String> p_277880_) {
@@ -553,10 +_,58 @@
         return this.settings.copy();
     }
 
+    public boolean hasConfirmedExperimentalWarning() {
+        return this.confirmedExperimentalWarning;
+    }
+
+    public PrimaryLevelData withConfirmedWarning(boolean confirmedWarning) { // Builder-like to not patch ctor
+        this.confirmedExperimentalWarning = confirmedWarning;
+        return this;
+    }
+
     @Deprecated
     public static enum SpecialWorldProperty {
         NONE,
         FLAT,
         DEBUG;
+    }
+
+    // Neo: Variable day time code
+
+    private float dayTimeFraction = 0.0f;
+    private float dayTimePerTick = -1.0f;
+
+    @Override
+    public float getDayTimeFraction() {
+        return dayTimeFraction;
+    }
+
+    @Override
+    public float getDayTimePerTick() {
+        return dayTimePerTick;
+    }
+
+    @Override
+    public void setDayTimeFraction(float dayTimeFraction) {
+        this.dayTimeFraction = dayTimeFraction;
+    }
+
+    @Override
+    public void setDayTimePerTick(float dayTimePerTick) {
+        this.dayTimePerTick = dayTimePerTick;
+    }
+
+    private static java.util.stream.Stream<String> updateRemovedFeatureFlags(java.util.stream.Stream<String> removedFeatures, java.util.stream.Stream<String> enabledFeatures) {
+        var unknownFeatureFlags = new HashSet<net.minecraft.resources.ResourceLocation>();
+        // parses the incoming Stream<String> and spits out unknown flag names (ResourceLocation)
+        // we do not care about the returned FeatureFlagSet, only the flags which do not exist
+        net.minecraft.world.flag.FeatureFlags.REGISTRY.fromNames(enabledFeatures.map(net.minecraft.resources.ResourceLocation::parse).collect(Collectors.toSet()), unknownFeatureFlags::add);
+        // concat the received removed flags with our new additions
+        return java.util.stream.Stream.concat(removedFeatures, unknownFeatureFlags.stream()
+                // we only want modded flags, mojang has datafixers for vanilla flags
+                .filter(java.util.function.Predicate.not(name -> name.getNamespace().equals(net.minecraft.resources.ResourceLocation.DEFAULT_NAMESPACE)))
+                .map(net.minecraft.resources.ResourceLocation::toString))
+                // no duplicates should exist in this stream
+                .distinct();
     }
 }
