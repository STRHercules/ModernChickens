--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -120,6 +_,7 @@
 import net.minecraft.world.scores.Team;
 
 public abstract class Player extends Avatar implements ContainerUser, net.neoforged.neoforge.common.extensions.IPlayerExtension {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     public static final int MAX_HEALTH = 20;
     public static final int SLEEP_DURATION = 100;
     public static final int WAKE_UP_DURATION = 10;
@@ -179,6 +_,10 @@
     public Entity currentExplosionCause;
     private boolean ignoreFallDamageFromCurrentImpulse = false;
     private int currentImpulseContextResetGraceTime = 0;
+    private final java.util.Collection<MutableComponent> prefixes = new java.util.LinkedList<>();
+    private final java.util.Collection<MutableComponent> suffixes = new java.util.LinkedList<>();
+    @Nullable
+    private Pose forcedPose = null;
 
     public Player(Level p_250508_, GameProfile p_252153_) {
         super(EntityType.PLAYER, p_250508_);
@@ -221,7 +_,8 @@
             .add(Attributes.MINING_EFFICIENCY)
             .add(Attributes.SWEEPING_DAMAGE_RATIO)
             .add(Attributes.WAYPOINT_TRANSMIT_RANGE, 6.0E7)
-            .add(Attributes.WAYPOINT_RECEIVE_RANGE, 6.0E7);
+            .add(Attributes.WAYPOINT_RECEIVE_RANGE, 6.0E7)
+            .add(net.neoforged.neoforge.common.NeoForgeMod.CREATIVE_FLIGHT);
     }
 
     @Override
@@ -235,6 +_,7 @@
 
     @Override
     public void tick() {
+        net.neoforged.neoforge.event.EventHooks.firePlayerTickPre(this);
         this.noPhysics = this.isSpectator();
         if (this.isSpectator() || this.isPassenger()) {
             this.setOnGround(false);
@@ -250,7 +_,7 @@
                 this.sleepCounter = 100;
             }
 
-            if (!this.level().isClientSide() && this.level().isBrightOutside()) {
+            if (!this.level().isClientSide() && !net.neoforged.neoforge.event.EventHooks.canEntityContinueSleeping(this, this.level().isBrightOutside() ? BedSleepingProblem.NOT_POSSIBLE_NOW : null)) {
                 this.stopSleepInBed(false, true);
             }
         } else if (this.sleepCounter > 0) {
@@ -288,6 +_,7 @@
         if (this.currentImpulseContextResetGraceTime > 0) {
             this.currentImpulseContextResetGraceTime--;
         }
+        net.neoforged.neoforge.event.EventHooks.firePlayerTickPost(this);
     }
 
     @Override
@@ -308,7 +_,11 @@
     }
 
     protected boolean updateIsUnderwater() {
-        this.wasUnderwater = this.isEyeInFluid(FluidTags.WATER);
+        this.wasUnderwater = false;
+        if (this.forgeFluidTypeHeight.isEmpty()) { return false; }
+        for (net.neoforged.neoforge.fluids.FluidType fluidType : this.forgeFluidTypeHeight.keySet()) {
+            if (fluidType.canSwim(this) && this.isInFluidType(fluidType)) { this.wasUnderwater = true; }
+        }
         return this.wasUnderwater;
     }
 
@@ -347,6 +_,10 @@
     }
 
     protected void updatePlayerPose() {
+        if (forcedPose != null) {
+            this.setPose(forcedPose);
+            return;
+        }
         if (this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.SWIMMING)) {
             Pose pose = this.getDesiredPose();
             Pose pose1;
@@ -535,6 +_,7 @@
 
     @Override
     public void die(DamageSource p_36152_) {
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_36152_)) return;
         super.die(p_36152_);
         this.reapplyPosition();
         if (!this.isSpectator() && this.level() instanceof ServerLevel serverlevel) {
@@ -592,10 +_,18 @@
 
     @Nullable
     public ItemEntity drop(ItemStack p_36177_, boolean p_36178_) {
-        return this.drop(p_36177_, false, p_36178_);
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, p_36177_, false, p_36178_);
     }
 
+    /**
+     * @deprecated Neo: {@link #getDestroySpeed(BlockState, BlockPos)} instead
+     */
+    @Deprecated
     public float getDestroySpeed(BlockState p_36282_) {
+        return getDestroySpeed(p_36282_, null);
+    }
+
+    public float getDestroySpeed(BlockState p_36282_, @Nullable BlockPos pos) {
         float f = this.inventory.getSelectedItem().getDestroySpeed(p_36282_);
         if (f > 1.0F) {
             f += (float)this.getAttributeValue(Attributes.MINING_EFFICIENCY);
@@ -624,13 +_,19 @@
             f /= 5.0F;
         }
 
+        f = net.neoforged.neoforge.event.EventHooks.getBreakSpeed(this, p_36282_, f, pos);
         return f;
     }
 
+    @Deprecated // Neo: use position sensitive version below
     public boolean hasCorrectToolForDrops(BlockState p_36299_) {
         return !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelectedItem().isCorrectToolForDrops(p_36299_);
     }
 
+    public boolean hasCorrectToolForDrops(BlockState state, Level level, BlockPos pos) {
+        return net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(this, state, level, pos);
+    }
+
     @Override
     protected void readAdditionalSaveData(ValueInput p_422427_) {
         super.readAdditionalSaveData(p_422427_);
@@ -705,7 +_,8 @@
                 return false;
             } else {
                 this.removeEntitiesOnShoulder();
-                if (p_376171_.scalesWithDifficulty()) {
+                p_376389_ = Math.max(0.0F, p_376171_.type().scaling().getScalingFunction().scaleDamage(p_376171_, this, p_376389_, this.level().getDifficulty()));
+                if (false && p_376171_.scalesWithDifficulty()) {
                     if (p_376451_.getDifficulty() == Difficulty.PEACEFUL) {
                         p_376389_ = 0.0F;
                     }
@@ -763,11 +_,14 @@
     @Override
     protected void actuallyHurt(ServerLevel p_376500_, DamageSource p_36312_, float p_36313_) {
         if (!this.isInvulnerableTo(p_376500_, p_36312_)) {
-            p_36313_ = this.getDamageAfterArmorAbsorb(p_36312_, p_36313_);
-            p_36313_ = this.getDamageAfterMagicAbsorb(p_36312_, p_36313_);
-            float f1 = Math.max(p_36313_ - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_36313_ - f1));
-            float f = p_36313_ - f1;
+            this.damageContainers.peek().setReduction(net.neoforged.neoforge.common.damagesource.DamageContainer.Reduction.ARMOR, this.damageContainers.peek().getNewDamage() - this.getDamageAfterArmorAbsorb(p_36312_, this.damageContainers.peek().getNewDamage()));
+            this.getDamageAfterMagicAbsorb(p_36312_, this.damageContainers.peek().getNewDamage());
+            float damage = net.neoforged.neoforge.common.CommonHooks.onLivingDamagePre(this, this.damageContainers.peek());
+            this.damageContainers.peek().setReduction(net.neoforged.neoforge.common.damagesource.DamageContainer.Reduction.ABSORPTION, Math.min(this.getAbsorptionAmount(), damage));
+            float absorbed = Math.min(damage, this.damageContainers.peek().getReduction(net.neoforged.neoforge.common.damagesource.DamageContainer.Reduction.ABSORPTION));
+            this.setAbsorptionAmount(Math.max(0, this.getAbsorptionAmount() - absorbed));
+            float f1 = this.damageContainers.peek().getNewDamage();
+            float f = absorbed;
             if (f > 0.0F && f < 3.4028235E37F) {
                 this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
             }
@@ -781,7 +_,9 @@
                 }
 
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
+                this.onDamageTaken(this.damageContainers.peek());
             }
+            net.neoforged.neoforge.common.CommonHooks.onLivingDamagePost(this, this.damageContainers.peek());
         }
     }
 
@@ -834,6 +_,8 @@
 
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntity(this, p_36158_, p_36159_);
+            if (cancelResult != null) return cancelResult;
             ItemStack itemstack = this.getItemInHand(p_36159_);
             ItemStack itemstack1 = itemstack.copy();
             InteractionResult interactionresult = p_36158_.interact(this, p_36159_);
@@ -842,6 +_,9 @@
                     itemstack.setCount(itemstack1.getCount());
                 }
 
+                if (!this.abilities.instabuild && itemstack.isEmpty()) {
+                    net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
+                }
                 return interactionresult;
             } else {
                 if (!itemstack.isEmpty() && p_36158_ instanceof LivingEntity) {
@@ -853,6 +_,7 @@
                     if (interactionresult1.consumesAction()) {
                         this.level().gameEvent(GameEvent.ENTITY_INTERACT, p_36158_.position(), GameEvent.Context.of(this));
                         if (itemstack.isEmpty() && !this.hasInfiniteMaterials()) {
+                            net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
                             this.setItemInHand(p_36159_, ItemStack.EMPTY);
                         }
 
@@ -882,6 +_,7 @@
     }
 
     @Override
+    // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/8922
     protected Vec3 maybeBackOffFromEdge(Vec3 p_36201_, MoverType p_36202_) {
         float f = this.maxUpStep();
         if (!this.abilities.flying
@@ -931,6 +_,7 @@
         }
     }
 
+    // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/9376
     private boolean isAboveGround(float p_341626_) {
         return this.onGround() || this.fallDistance < p_341626_ && !this.canFallAtLeast(0.0, 0.0, p_341626_ - this.fallDistance);
     }
@@ -952,6 +_,7 @@
     }
 
     public void attack(Entity p_36347_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onPlayerAttackTarget(this, p_36347_)) return;
         if (p_36347_.isAttackable()) {
             if (!p_36347_.skipAttackInteraction(this)) {
                 float f = this.isAutoSpinAttack() ? this.autoSpinAttackDmg : (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
@@ -961,7 +_,6 @@
                 float f2 = this.getAttackStrengthScale(0.5F);
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.resetAttackStrengthTicker();
                 if (p_36347_.getType().is(EntityTypeTags.REDIRECTABLE_PROJECTILE)
                     && p_36347_ instanceof Projectile projectile
                     && projectile.deflect(ProjectileDeflection.AIM_DEFLECT, this, EntityReference.of(this), true)) {
@@ -988,20 +_,31 @@
                             && !this.isPassenger()
                             && p_36347_ instanceof LivingEntity
                             && !this.isSprinting();
+                        // Neo: Fire the critical hit event and override the critical hit status and damage multiplier based on the event.
+                        // The boolean local above (flag1) is the vanilla critical hit result.
+                        var critEvent = net.neoforged.neoforge.common.CommonHooks.fireCriticalHit(this, p_36347_, flag1, flag1 ? 1.5F : 1.0F);
+                        flag1 = critEvent.isCriticalHit();
                         if (flag1) {
-                            f *= 1.5F;
+                            f *= critEvent.getDamageMultiplier();
                         }
 
                         float f3 = f + f1;
                         boolean flag2 = false;
-                        if (flag3 && !flag1 && !flag && this.onGround()) {
+                        // Neo: Replace !flag1 (!isCriticalHit) with the logic from the CriticalHitEvent.
+                        boolean critBlocksSweep = critEvent.isCriticalHit() && critEvent.disableSweep();
+                        if (flag3 && !critBlocksSweep && !flag && this.onGround()) {
                             double d0 = this.getKnownMovement().horizontalDistanceSqr();
                             double d1 = this.getSpeed() * 2.5;
-                            if (d0 < Mth.square(d1) && this.getItemInHand(InteractionHand.MAIN_HAND).is(ItemTags.SWORDS)) {
+                            // Neo: Make sweep attacks check SWORD_SWEEP instead of ItemTags.SWORDS.
+                            if (d0 < Mth.square(d1) && this.getItemInHand(InteractionHand.MAIN_HAND).canPerformAction(net.neoforged.neoforge.common.ItemAbilities.SWORD_SWEEP)) {
                                 flag2 = true;
                             }
                         }
 
+                        // Neo: Fire the SweepAttackEvent and overwrite the value of flag2 (the local controlling if a sweep will occur).
+                        var sweepEvent = net.neoforged.neoforge.common.CommonHooks.fireSweepAttack(this, p_36347_, flag2);
+                        flag2 = sweepEvent.isSweeping();
+
                         float f5 = 0.0F;
                         if (p_36347_ instanceof LivingEntity livingentity) {
                             f5 = livingentity.getHealth();
@@ -1032,12 +_,13 @@
                                 float f6 = 1.0F + (float)this.getAttributeValue(Attributes.SWEEPING_DAMAGE_RATIO) * f;
 
                                 for (LivingEntity livingentity2 : this.level()
-                                    .getEntitiesOfClass(LivingEntity.class, p_36347_.getBoundingBox().inflate(1.0, 0.25, 1.0))) {
+                                    .getEntitiesOfClass(LivingEntity.class, itemstack.getSweepHitBox(this, p_36347_))) { // Neo: Patch in item extension for custom sweep hit box
+                                    double entityReachSq = Mth.square(this.entityInteractionRange()); // Use entity reach instead of constant 9.0. Vanilla uses bottom center-to-center checks here, so don't update this to use canReach, since it uses closest-corner checks.
                                     if (livingentity2 != this
                                         && livingentity2 != p_36347_
                                         && !this.isAlliedTo(livingentity2)
                                         && !(livingentity2 instanceof ArmorStand armorstand && armorstand.isMarker())
-                                        && this.distanceToSqr(livingentity2) < 9.0) {
+                                        && this.distanceToSqr(livingentity2) < entityReachSq) {
                                         float f8 = this.getEnchantedDamage(livingentity2, f6, damagesource) * f2;
                                         if (this.level() instanceof ServerLevel serverlevel && livingentity2.hurtServer(serverlevel, damagesource, f8)) {
                                             livingentity2.knockback(
@@ -1085,11 +_,12 @@
 
                             this.setLastHurtMob(p_36347_);
                             Entity entity = p_36347_;
-                            if (p_36347_ instanceof EnderDragonPart) {
-                                entity = ((EnderDragonPart)p_36347_).parentMob;
+                            if (p_36347_ instanceof net.neoforged.neoforge.entity.PartEntity) {
+                                entity = ((net.neoforged.neoforge.entity.PartEntity<?>) p_36347_).getParent();
                             }
 
                             boolean flag5 = false;
+                            ItemStack copy = itemstack.copy();
                             if (this.level() instanceof ServerLevel serverlevel1) {
                                 if (entity instanceof LivingEntity livingentity3) {
                                     flag5 = itemstack.hurtEnemy(livingentity3, this);
@@ -1104,6 +_,7 @@
                                 }
 
                                 if (itemstack.isEmpty()) {
+                                    net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, copy, itemstack == this.getMainHandItem() ? InteractionHand.MAIN_HAND : InteractionHand.OFF_HAND);
                                     if (itemstack == this.getMainHandItem()) {
                                         this.setItemInHand(InteractionHand.MAIN_HAND, ItemStack.EMPTY);
                                     } else {
@@ -1131,6 +_,7 @@
                         }
                     }
                 }
+                this.resetAttackStrengthTicker(); // FORGE: Moved from beginning of attack() so that getAttackStrengthScale() returns an accurate value during all attack events
             }
         }
     }
@@ -1237,6 +_,7 @@
     }
 
     public void stopSleepInBed(boolean p_36226_, boolean p_36227_) {
+        net.neoforged.neoforge.event.EventHooks.onPlayerWakeup(this, p_36226_, p_36227_);
         super.stopSleeping();
         if (this.level() instanceof ServerLevel && p_36227_) {
             ((ServerLevel)this.level()).updateSleepingPlayerList();
@@ -1342,7 +_,8 @@
 
     @Override
     public boolean causeFallDamage(double p_397701_, float p_150093_, DamageSource p_150095_) {
-        if (this.abilities.mayfly) {
+        if (this.mayFly()) {
+            net.neoforged.neoforge.event.EventHooks.onPlayerFall(this, p_150093_, p_150093_);
             return false;
         } else {
             if (p_397701_ >= 2.0) {
@@ -1397,13 +_,13 @@
     protected void playStepSound(BlockPos p_282121_, BlockState p_282194_) {
         if (this.isInWater()) {
             this.waterSwimSound();
-            this.playMuffledStepSound(p_282194_);
+            this.playMuffledStepSound(p_282194_, p_282121_);
         } else {
             BlockPos blockpos = this.getPrimaryStepSoundBlockPos(p_282121_);
             if (!p_282121_.equals(blockpos)) {
                 BlockState blockstate = this.level().getBlockState(blockpos);
                 if (blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS)) {
-                    this.playCombinationStepSounds(blockstate, p_282194_);
+                    this.playCombinationStepSounds(blockstate, p_282194_, blockpos, p_282121_);
                 } else {
                     super.playStepSound(blockpos, blockstate);
                 }
@@ -1434,6 +_,10 @@
     }
 
     public void giveExperiencePoints(int p_36291_) {
+        net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange(this, p_36291_);
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+        p_36291_ = event.getAmount();
+
         this.increaseScore(p_36291_);
         this.experienceProgress = this.experienceProgress + (float)p_36291_ / this.getXpNeededForNextLevel();
         this.totalExperience = Mth.clamp(this.totalExperience + p_36291_, 0, Integer.MAX_VALUE);
@@ -1461,7 +_,7 @@
     }
 
     public void onEnchantmentPerformed(ItemStack p_36172_, int p_36173_) {
-        this.experienceLevel -= p_36173_;
+        giveExperienceLevels(-p_36173_);
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
             this.experienceProgress = 0.0F;
@@ -1472,6 +_,10 @@
     }
 
     public void giveExperienceLevels(int p_36276_) {
+        net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange(this, p_36276_);
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+        p_36276_ = event.getLevels();
+
         this.experienceLevel = IntMath.saturatedAdd(this.experienceLevel, p_36276_);
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
@@ -1607,7 +_,11 @@
 
     @Override
     public Component getDisplayName() {
-        MutableComponent mutablecomponent = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+        if (this.displayname == null) this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+        MutableComponent mutablecomponent = Component.literal("");
+        mutablecomponent = prefixes.stream().reduce(mutablecomponent, MutableComponent::append);
+        mutablecomponent = mutablecomponent.append(PlayerTeam.formatNameForTeam(this.getTeam(), this.displayname));
+        mutablecomponent = suffixes.stream().reduce(mutablecomponent, MutableComponent::append);
         return this.decorateDisplayNameComponent(mutablecomponent);
     }
 
@@ -1771,21 +_,21 @@
         if (!(p_36349_.getItem() instanceof ProjectileWeaponItem)) {
             return ItemStack.EMPTY;
         } else {
-            Predicate<ItemStack> predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getSupportedHeldProjectiles();
+            Predicate<ItemStack> predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getSupportedHeldProjectiles(p_36349_);
             ItemStack itemstack = ProjectileWeaponItem.getHeldProjectile(this, predicate);
             if (!itemstack.isEmpty()) {
-                return itemstack;
+                return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack);
             } else {
-                predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getAllSupportedProjectiles();
+                predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getAllSupportedProjectiles(p_36349_);
 
                 for (int i = 0; i < this.inventory.getContainerSize(); i++) {
                     ItemStack itemstack1 = this.inventory.getItem(i);
                     if (predicate.test(itemstack1)) {
-                        return itemstack1;
+                        return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack1);
                     }
                 }
 
-                return this.hasInfiniteMaterials() ? new ItemStack(Items.ARROW) : ItemStack.EMPTY;
+                return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, this.abilities.instabuild ? ((ProjectileWeaponItem)p_36349_.getItem()).getDefaultCreativeAmmo(this, p_36349_) : ItemStack.EMPTY);
             }
         }
     }
@@ -1825,7 +_,7 @@
     }
 
     public boolean isScoping() {
-        return this.isUsingItem() && this.getUseItem().is(Items.SPYGLASS);
+        return this.isUsingItem() && this.getUseItem().canPerformAction(net.neoforged.neoforge.common.ItemAbilities.SPYGLASS_SCOPE);
     }
 
     @Override
@@ -1987,5 +_,41 @@
         public Component getMessage() {
             return this.message;
         }
+    }
+
+    // Neo: Getters for the Player's name prefixes and suffixes
+    public Collection<MutableComponent> getPrefixes() {
+         return this.prefixes;
+    }
+
+    public Collection<MutableComponent> getSuffixes() {
+         return this.suffixes;
+    }
+
+    private Component displayname = null;
+
+    /**
+     * Neo: Force the displayed name to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+     */
+    public void refreshDisplayName() {
+        this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+    }
+
+    /**
+     * Neo: Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+     * This has to be set just once, do not set it every tick.
+     * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+     */
+    public void setForcedPose(@Nullable Pose pose) {
+        this.forcedPose = pose;
+    }
+
+    /**
+     * Neo:
+     * @return The forced pose if set, null otherwise
+     */
+    @Nullable
+    public Pose getForcedPose() {
+        return this.forcedPose;
     }
 }
