--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -96,7 +_,7 @@
         );
     public static final StreamCodec<RegistryFriendlyByteBuf, Holder<Item>> STREAM_CODEC = ByteBufCodecs.holderRegistry(Registries.ITEM);
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+    public static final Map<Block, Item> BY_BLOCK = net.neoforged.neoforge.registries.GameData.getBlockItemMap();
     public static final ResourceLocation BASE_ATTACK_DAMAGE_ID = ResourceLocation.withDefaultNamespace("base_attack_damage");
     public static final ResourceLocation BASE_ATTACK_SPEED_ID = ResourceLocation.withDefaultNamespace("base_attack_speed");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
@@ -109,6 +_,8 @@
     private final Item craftingRemainingItem;
     protected final String descriptionId;
     private final FeatureFlagSet requiredFeatures;
+    @Nullable
+    private net.neoforged.neoforge.transfer.item.ItemResource defaultResource;
 
     public static int getId(Item p_41394_) {
         return p_41394_ == null ? 0 : BuiltInRegistries.ITEM.getId(p_41394_);
@@ -128,12 +_,13 @@
         this.components = p_41383_.buildAndValidateComponents(Component.translatable(this.descriptionId), p_41383_.effectiveModel());
         this.craftingRemainingItem = p_41383_.craftingRemainingItem;
         this.requiredFeatures = p_41383_.requiredFeatures;
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_IN_IDE && false) {
             String s = this.getClass().getSimpleName();
             if (!s.endsWith("Item")) {
                 LOGGER.error("Item classes should end with Item and {} doesn't.", s);
             }
         }
+        this.canCombineRepair = p_41383_.canCombineRepair;
     }
 
     @Deprecated
@@ -145,6 +_,25 @@
         return this.components;
     }
 
+    /** @deprecated Neo: do not use, use {@link net.neoforged.neoforge.event.ModifyDefaultComponentsEvent the event} instead */
+    @org.jetbrains.annotations.ApiStatus.Internal @Deprecated
+    public void modifyDefaultComponentsFrom(net.minecraft.core.component.DataComponentPatch patch) {
+        if (!net.neoforged.neoforge.internal.RegistrationEvents.canModifyComponents()) throw new IllegalStateException("Default components cannot be modified now!");
+        var builder = DataComponentMap.builder().addAll(components);
+        patch.entrySet().forEach(entry -> builder.set((DataComponentType)entry.getKey(), entry.getValue().orElse(null)));
+        components = Properties.validateComponents(builder.build());
+        defaultResource = null;
+    }
+
+    /** @deprecated Neo: do not use, use {@link net.neoforged.neoforge.transfer.item.ItemResource#of} instead. */
+    @org.jetbrains.annotations.ApiStatus.Internal @Deprecated
+    public net.neoforged.neoforge.transfer.item.ItemResource computeDefaultResource(java.util.function.Function<Item, net.neoforged.neoforge.transfer.item.ItemResource> resourceConstructor) {
+        if (this.defaultResource == null) {
+            this.defaultResource = resourceConstructor.apply(this);
+        }
+        return this.defaultResource;
+    }
+
     public int getDefaultMaxStackSize() {
         return this.components.getOrDefault(DataComponents.MAX_STACK_SIZE, 1);
     }
@@ -152,6 +_,8 @@
     public void onUseTick(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, int p_41431_) {
     }
 
+    /** @deprecated Forge: {@link net.neoforged.neoforge.common.extensions.IItemExtension#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150887_) {
     }
 
@@ -266,6 +_,7 @@
         return BuiltInRegistries.ITEM.wrapAsHolder(this).getRegisteredName();
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public final ItemStack getCraftingRemainder() {
         return this.craftingRemainingItem == null ? ItemStack.EMPTY : new ItemStack(this.craftingRemainingItem);
     }
@@ -338,13 +_,26 @@
     }
 
     public boolean useOnRelease(ItemStack p_41464_) {
-        return false;
+        return p_41464_.getItem() == Items.CROSSBOW;
+    }
+
+    protected final boolean canCombineRepair;
+
+    @Override
+    public boolean isCombineRepairable(ItemStack stack) {
+        return canCombineRepair && isDamageable(stack);
     }
 
     public ItemStack getDefaultInstance() {
         return new ItemStack(this);
     }
 
+    /**
+     * @deprecated Neo: call {@link net.neoforged.neoforge.common.extensions.IItemStackExtension#canFitInsideContainerItems()} instead,
+     *             prefer overriding {@link net.neoforged.neoforge.common.extensions.IItemExtension#canFitInsideContainerItems(ItemStack)}
+     * @implNote It is recommended to still override this to ensure mods calling this instead of the extension still behave safely.
+     */
+    @Deprecated
     public boolean canFitInsideContainerItems() {
         return true;
     }
@@ -369,6 +_,12 @@
         private ResourceKey<Item> id;
         private DependantName<Item, String> descriptionId = ITEM_DESCRIPTION_ID;
         private DependantName<Item, ResourceLocation> model = ResourceKey::location;
+        private boolean canCombineRepair = true;
+
+        public Item.Properties setNoCombineRepair() {
+            canCombineRepair = false;
+            return this;
+        }
 
         public Item.Properties food(FoodProperties p_41490_) {
             return this.food(p_41490_, Consumables.DEFAULT_FOOD);
@@ -547,6 +_,7 @@
         }
 
         public <T> Item.Properties component(DataComponentType<T> p_330871_, T p_330323_) {
+            net.neoforged.neoforge.common.CommonHooks.validateComponent(p_330323_);
             this.components.set(p_330871_, p_330323_);
             return this;
         }
@@ -557,6 +_,10 @@
 
         DataComponentMap buildAndValidateComponents(Component p_371796_, ResourceLocation p_371450_) {
             DataComponentMap datacomponentmap = this.components.set(DataComponents.ITEM_NAME, p_371796_).set(DataComponents.ITEM_MODEL, p_371450_).build();
+            return validateComponents(datacomponentmap);
+        }
+
+        public static DataComponentMap validateComponents(DataComponentMap datacomponentmap) {
             if (datacomponentmap.has(DataComponents.DAMAGE) && datacomponentmap.getOrDefault(DataComponents.MAX_STACK_SIZE, 1) > 1) {
                 throw new IllegalStateException("Item cannot have both durability and be stackable");
             } else {
@@ -600,6 +_,14 @@
 
         boolean isPeaceful();
 
+        /**
+         * Neo: Returns the level if it's available.
+         */
+        @Nullable
+        default Level level() {
+            return null;
+        }
+
         static Item.TooltipContext of(@Nullable final Level p_339599_) {
             return p_339599_ == null ? EMPTY : new Item.TooltipContext() {
                 @Override
@@ -620,6 +_,11 @@
                 @Override
                 public boolean isPeaceful() {
                     return p_339599_.getDifficulty() == Difficulty.PEACEFUL;
+                }
+
+                @Override
+                public Level level() {
+                    return p_339599_;
                 }
             };
         }
