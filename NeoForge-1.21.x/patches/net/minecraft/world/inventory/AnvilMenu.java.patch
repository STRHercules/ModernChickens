--- a/net/minecraft/world/inventory/AnvilMenu.java
+++ b/net/minecraft/world/inventory/AnvilMenu.java
@@ -76,6 +_,16 @@
 
     @Override
     protected void onTake(Player p_150474_, ItemStack p_150475_) {
+        // Neo: Fire the AnvilCraftEvent.Pre here, before any changes are made to the anvil or the contained items.
+        // If a user cancels the event, we presume they are handling any of the below logic themselves.
+        var event = net.neoforged.neoforge.common.CommonHooks.fireAnvilCraftPre(this, p_150474_, p_150475_, this.inputSlots.getItem(0), this.inputSlots.getItem(1));
+        if (event.isCanceled()) {
+            return;
+        }
+
+        ItemStack leftInputSnapshot = this.inputSlots.getItem(0).copy();
+        ItemStack rightInputSnapshot = this.inputSlots.getItem(1).copy();
+
         if (!p_150474_.hasInfiniteMaterials()) {
             p_150474_.giveExperienceLevels(-this.cost.get());
         }
@@ -115,10 +_,30 @@
                 p_150479_.levelEvent(1030, p_150480_, 0);
             }
         });
+
+        // Neo: Fire post after all logic has taken place. For ease of use, we record the original input stacks and pass them to this method.
+        // The modified stacks are available through the menu.
+        net.neoforged.neoforge.common.CommonHooks.fireAnvilCraftPost(this, p_150474_, p_150475_, leftInputSnapshot, rightInputSnapshot);
     }
 
     @Override
-    public void createResult() {
+    public final void createResult() {
+        // Neo: Override the real createResult() method to invoke the vanilla logic, and then call the event hook.
+        // Since the vanilla createResult() has multiple returns, we need to wrap it. The choices are this, or pack it in a lambda.
+        this.createResultInternal();
+        ItemStack leftInput = this.inputSlots.getItem(0);
+        ItemStack rightInput = this.inputSlots.getItem(1);
+        net.neoforged.neoforge.common.CommonHooks.onAnvilUpdate(this, leftInput, rightInput, resultSlots, itemName, this.player);
+    }
+
+    /**
+     * Neo: This is the original createResult() method, which is called by the above method ({@link #createResult()}.
+     * <p>
+     * If you would normally override {@link #createResult()}, you should override this method instead.
+     *
+     * @implNote This replacement exists so we can fire the AnvilUpdateEvent with the vanilla result, despite the multiple returns in the original method.
+     */
+    protected void createResultInternal() {
         ItemStack itemstack = this.inputSlots.getItem(0);
         this.onlyRenaming = false;
         this.cost.set(1);
@@ -183,8 +_,10 @@
                         int j2 = entry.getIntValue();
                         j2 = i2 == j2 ? j2 + 1 : Math.max(j2, i2);
                         Enchantment enchantment = holder.value();
-                        boolean flag1 = enchantment.canEnchant(itemstack);
-                        if (this.player.hasInfiniteMaterials() || itemstack.is(Items.ENCHANTED_BOOK)) {
+                        // Neo: Respect IItemExtension#supportsEnchantment - we also delegate the logic for Enchanted Books to this method.
+                        // Though we still allow creative players to combine any item with any enchantment in the anvil here.
+                        boolean flag1 = itemstack.supportsEnchantment(holder);
+                        if (this.player.getAbilities().instabuild) {
                             flag1 = true;
                         }
 
@@ -309,4 +_,11 @@
     public int getCost() {
         return this.cost.get();
     }
+
+    /**
+     * Neo: Sets the cost. Negative values are clamped to zero.
+     */
+    public void setCost(int value) {
+        this.cost.set(Math.max(0, value));
+     }
 }
