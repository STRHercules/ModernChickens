--- a/net/minecraft/client/KeyMapping.java
+++ b/net/minecraft/client/KeyMapping.java
@@ -20,25 +_,33 @@
 
 @OnlyIn(Dist.CLIENT)
 public class KeyMapping implements Comparable<KeyMapping>, net.neoforged.neoforge.client.extensions.IKeyMappingExtension {
-    private static final Map<String, KeyMapping> ALL = Maps.newHashMap();
-    private static final Map<InputConstants.Key, List<KeyMapping>> MAP = Maps.newHashMap();
+    private static final Map<String, KeyMapping> ALL = Maps.newConcurrentMap();
+    private static final net.neoforged.neoforge.client.settings.KeyMappingLookup MAP = new net.neoforged.neoforge.client.settings.KeyMappingLookup();
     private final String name;
     private final InputConstants.Key defaultKey;
     private final KeyMapping.Category category;
     protected InputConstants.Key key;
     boolean isDown;
     private int clickCount;
+    // Neo: Injected Key Mapping controls
+    private net.neoforged.neoforge.client.settings.KeyModifier keyModifierDefault = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+    private net.neoforged.neoforge.client.settings.KeyModifier keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+    private net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext = net.neoforged.neoforge.client.settings.KeyConflictContext.UNIVERSAL;
 
     public static void click(InputConstants.Key p_90836_) {
         forAllKeyMappings(p_90836_, p_445128_ -> p_445128_.clickCount++);
     }
 
     public static void set(InputConstants.Key p_90838_, boolean p_90839_) {
-        forAllKeyMappings(p_90838_, p_445126_ -> p_445126_.setDown(p_90839_));
+        forAllKeyMappings(p_90838_, p_445126_ -> p_445126_.setDown(p_90839_), !p_90839_);
     }
 
     private static void forAllKeyMappings(InputConstants.Key p_446544_, Consumer<KeyMapping> p_446545_) {
-        List<KeyMapping> list = MAP.get(p_446544_);
+        forAllKeyMappings(p_446544_, p_446545_, false);
+    }
+
+    private static void forAllKeyMappings(InputConstants.Key p_446544_, Consumer<KeyMapping> p_446545_, boolean releasing) {
+        List<KeyMapping> list = MAP.getAll(p_446544_, releasing);
         if (list != null && !list.isEmpty()) {
             for (KeyMapping keymapping : list) {
                 p_446545_.accept(keymapping);
@@ -99,8 +_,82 @@
         this.registerMapping(this.key);
     }
 
+    // Neo: Injected Key Mapping constructors to assist modders
+    /**
+     * Convenience constructor for creating KeyMappings with keyConflictContext set.
+     */
+    public KeyMapping(String name, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, InputConstants.Type inputType, int keyCode, KeyMapping.Category category) {
+        this(name, keyConflictContext, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyMappings with keyConflictContext set.
+     */
+    public KeyMapping(String name, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, InputConstants.Key keyCode, KeyMapping.Category category) {
+        this(name, keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier.NONE, keyCode, category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyMappings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String name, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier keyModifier, InputConstants.Type inputType, int keyCode, KeyMapping.Category category) {
+        this(name, keyConflictContext, keyModifier, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyMappings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String name, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode, KeyMapping.Category category) {
+        this.name = name;
+        this.key = keyCode;
+        this.defaultKey = keyCode;
+        this.category = category;
+        this.keyConflictContext = keyConflictContext;
+        this.keyModifier = keyModifier;
+        this.keyModifierDefault = keyModifier;
+        if (this.keyModifier.matches(keyCode))
+            this.keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+        ALL.put(name, this);
+        MAP.put(keyCode, this);
+    }
+
+    @Override
+    public InputConstants.Key getKey() {
+        return key;
+    }
+
+    @Override
+    public void setKeyConflictContext(net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext) {
+        this.keyConflictContext = keyConflictContext;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.IKeyConflictContext getKeyConflictContext() {
+        return keyConflictContext;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.KeyModifier getDefaultKeyModifier() {
+        return keyModifierDefault;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.KeyModifier getKeyModifier() {
+        return keyModifier;
+    }
+
+    @Override
+    public void setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode) {
+        this.key = keyCode;
+        if (keyModifier.matches(keyCode))
+            keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+        MAP.remove(this);
+        this.keyModifier = keyModifier;
+        MAP.put(keyCode, this);
+    }
+
     public boolean isDown() {
-        return this.isDown;
+        return this.isDown && isConflictContextAndModifierActive();
     }
 
     public KeyMapping.Category getCategory() {
@@ -149,6 +_,20 @@
     }
 
     public boolean same(KeyMapping p_90851_) {
+        if (getKeyConflictContext().conflicts(p_90851_.getKeyConflictContext()) || p_90851_.getKeyConflictContext().conflicts(getKeyConflictContext())) {
+            net.neoforged.neoforge.client.settings.KeyModifier keyModifier = getKeyModifier();
+            net.neoforged.neoforge.client.settings.KeyModifier otherKeyModifier = p_90851_.getKeyModifier();
+            if (keyModifier.matches(p_90851_.getKey()) || otherKeyModifier.matches(getKey())) {
+                return true;
+            } else if (getKey().equals(p_90851_.getKey())) {
+                // IN_GAME key contexts have a conflict when at least one modifier is NONE.
+                // For example: If you hold shift to crouch, you can still press E to open your inventory. This means that a Shift+E hotkey is in conflict with E.
+                // GUI and other key contexts do not have this limitation.
+                return keyModifier == otherKeyModifier ||
+                    (getKeyConflictContext().conflicts(net.neoforged.neoforge.client.settings.KeyConflictContext.IN_GAME) &&
+                    (keyModifier == net.neoforged.neoforge.client.settings.KeyModifier.NONE || otherKeyModifier == net.neoforged.neoforge.client.settings.KeyModifier.NONE));
+            }
+        }
         return this.key.equals(p_90851_.key);
     }
 
@@ -167,11 +_,13 @@
     }
 
     public Component getTranslatedKeyMessage() {
+        return getKeyModifier().getCombinedName(key, () -> {
         return this.key.getDisplayName();
+        });
     }
 
     public boolean isDefault() {
-        return this.key.equals(this.defaultKey);
+        return this.key.equals(this.defaultKey) && getKeyModifier() == getDefaultKeyModifier();
     }
 
     public String saveString() {
@@ -183,7 +_,7 @@
     }
 
     private void registerMapping(InputConstants.Key p_446356_) {
-        MAP.computeIfAbsent(p_446356_, p_445127_ -> new ArrayList<>()).add(this);
+        MAP.put(p_446356_, this);
     }
 
     @Nullable
@@ -206,6 +_,10 @@
             return register(ResourceLocation.withDefaultNamespace(p_449101_));
         }
 
+        /**
+         * @deprecated Neo: use {@link net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent#registerCategory(Category)} instead
+         */
+        @Deprecated
         public static KeyMapping.Category register(ResourceLocation p_449977_) {
             KeyMapping.Category keymapping$category = new KeyMapping.Category(p_449977_);
             if (SORT_ORDER.contains(keymapping$category)) {
