--- a/net/minecraft/client/renderer/block/model/BlockStateModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockStateModel.java
@@ -23,14 +_,20 @@
 
 @OnlyIn(Dist.CLIENT)
 public interface BlockStateModel extends net.neoforged.neoforge.client.extensions.BlockStateModelExtension {
+    /** @deprecated Neo: Use {@link #collectParts(net.minecraft.world.level.BlockAndTintGetter, net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState, RandomSource, List)}. */
+    @Deprecated
     void collectParts(RandomSource p_410417_, List<BlockModelPart> p_410254_);
 
+    /** @deprecated Neo: Use {@link #collectParts(net.minecraft.world.level.BlockAndTintGetter, net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState, RandomSource)}. */
+    @Deprecated
     default List<BlockModelPart> collectParts(RandomSource p_410570_) {
         List<BlockModelPart> list = new ObjectArrayList<>();
         this.collectParts(p_410570_, list);
         return list;
     }
 
+    /** @deprecated Neo: Use {@link #particleIcon(net.minecraft.world.level.BlockAndTintGetter, net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState)}. */
+    @Deprecated
     TextureAtlasSprite particleIcon();
 
     @OnlyIn(Dist.CLIENT)
@@ -70,32 +_,43 @@
                 )
                 .apply(p_409971_, Weighted::new)
         );
-        Codec<WeightedVariants.Unbaked> HARDCODED_WEIGHTED_CODEC = ExtraCodecs.nonEmptyList(ELEMENT_CODEC.listOf())
+        @org.jetbrains.annotations.ApiStatus.Internal
+        Codec<Either<net.neoforged.neoforge.client.model.block.CustomUnbakedBlockStateModel, SingleVariant.Unbaked>> SINGLE_MODEL_CODEC = net.neoforged.neoforge.client.model.block.BlockStateModelHooks.makeSingleModelCodec().codec();
+        @org.jetbrains.annotations.ApiStatus.Internal
+        Codec<Weighted<Either<net.neoforged.neoforge.client.model.block.CustomUnbakedBlockStateModel, SingleVariant.Unbaked>>> WEIGHTED_MODEL_CODEC = net.neoforged.neoforge.client.model.block.BlockStateModelHooks.makeElementCodec();
+        Codec<WeightedVariants.Unbaked> HARDCODED_WEIGHTED_CODEC = ExtraCodecs.nonEmptyList(WEIGHTED_MODEL_CODEC.listOf())
             .flatComapMap(
                 p_409703_ -> new WeightedVariants.Unbaked(
-                    WeightedList.of(Lists.transform((List<Weighted<Variant>>)p_409703_, p_409617_ -> p_409617_.map(SingleVariant.Unbaked::new)))
+                    WeightedList.of(Lists.transform(p_409703_, p_409617_ -> p_409617_.map(either -> either.map(m -> m, m -> m))))
                 ),
                 p_409817_ -> {
                     List<Weighted<BlockStateModel.Unbaked>> list = p_409817_.entries().unwrap();
-                    List<Weighted<Variant>> list1 = new ArrayList<>(list.size());
+                    List<Weighted<Either<net.neoforged.neoforge.client.model.block.CustomUnbakedBlockStateModel, SingleVariant.Unbaked>>> list1 = new ArrayList<>(list.size());
 
                     for (Weighted<BlockStateModel.Unbaked> weighted : list) {
-                        if (!(weighted.value() instanceof SingleVariant.Unbaked singlevariant$unbaked)) {
-                            return DataResult.error(() -> "Only single variants are supported");
+                        switch (weighted.value()) {
+                            case net.neoforged.neoforge.client.model.block.CustomUnbakedBlockStateModel customModel -> {
+                                list1.add(new Weighted<>(Either.left(customModel), weighted.weight()));
+                            }
+                            case SingleVariant.Unbaked singlevariant$unbaked -> {
+                                list1.add(new Weighted<>(Either.right(new SingleVariant.Unbaked(singlevariant$unbaked.variant())), weighted.weight()));
+                            }
+                            default -> {
+                                return DataResult.error(() -> "Only custom models or single variants are supported");
+                            }
                         }
-
-                        list1.add(new Weighted<>(singlevariant$unbaked.variant(), weighted.weight()));
                     }
 
                     return DataResult.success(list1);
                 }
             );
-        Codec<BlockStateModel.Unbaked> CODEC = Codec.either(HARDCODED_WEIGHTED_CODEC, SingleVariant.Unbaked.CODEC)
-            .flatComapMap(p_410308_ -> p_410308_.map(p_410746_ -> p_410746_, p_410169_ -> p_410169_), p_410404_ -> {
+        Codec<BlockStateModel.Unbaked> CODEC = Codec.either(HARDCODED_WEIGHTED_CODEC, SINGLE_MODEL_CODEC)
+            .flatComapMap(p_410308_ -> p_410308_.map(p_410746_ -> p_410746_, p_410169_ -> p_410169_.map(m -> m, m -> m)), p_410404_ -> {
                 return switch (p_410404_) {
-                    case SingleVariant.Unbaked singlevariant$unbaked -> DataResult.success(Either.right(singlevariant$unbaked));
+                    case net.neoforged.neoforge.client.model.block.CustomUnbakedBlockStateModel customModel -> DataResult.success(Either.right(Either.left(customModel)));
+                    case SingleVariant.Unbaked singlevariant$unbaked -> DataResult.success(Either.right(Either.right(singlevariant$unbaked)));
                     case WeightedVariants.Unbaked weightedvariants$unbaked -> DataResult.success(Either.left(weightedvariants$unbaked));
-                    default -> DataResult.error(() -> "Only a single variant or a list of variants are supported");
+                    default -> DataResult.error(() -> "Only a custom model or a single variant or a list of variants are supported");
                 };
             });
 
