--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -28,21 +_,48 @@
     @Nullable Boolean ambientOcclusion,
     @Nullable ItemTransforms transforms,
     TextureSlots.Data textureSlots,
-    @Nullable ResourceLocation parent
+    @Nullable ResourceLocation parent,
+    @Nullable com.mojang.math.Transformation rootTransform,
+    net.neoforged.neoforge.client.RenderTypeGroup renderTypeGroup,
+    java.util.Map<String, Boolean> partVisibility
 ) implements UnbakedModel {
     @VisibleForTesting
     public static final Gson GSON = new GsonBuilder()
+        .registerTypeHierarchyAdapter(UnbakedModel.class, new net.neoforged.neoforge.client.model.UnbakedModelParser.Deserializer())
         .registerTypeAdapter(BlockModel.class, new BlockModel.Deserializer())
         .registerTypeAdapter(BlockElement.class, new BlockElement.Deserializer())
         .registerTypeAdapter(BlockElementFace.class, new BlockElementFace.Deserializer())
         .registerTypeAdapter(ItemTransform.class, new ItemTransform.Deserializer())
         .registerTypeAdapter(ItemTransforms.class, new ItemTransforms.Deserializer())
+        .registerTypeAdapter(com.mojang.math.Transformation.class, new net.neoforged.neoforge.common.util.TransformationHelper.Deserializer())
         .create();
 
+    /**
+     * @deprecated Neo: use {@link net.neoforged.neoforge.client.model.UnbakedModelParser#parse(Reader)} instead
+     */
+    @Deprecated
     public static BlockModel fromStream(Reader p_111462_) {
         return GsonHelper.fromJson(GSON, p_111462_, BlockModel.class);
     }
 
+    public BlockModel(
+            @Nullable UnbakedGeometry geometry,
+            @Nullable UnbakedModel.GuiLight guiLight,
+            @Nullable Boolean ambientOcclusion,
+            @Nullable ItemTransforms transforms,
+            TextureSlots.Data textureSlots,
+            @Nullable ResourceLocation parent
+    ) {
+        this(geometry, guiLight, ambientOcclusion, transforms, textureSlots, parent, null, net.neoforged.neoforge.client.RenderTypeGroup.EMPTY, java.util.Map.of());
+    }
+
+    @Override
+    public void fillAdditionalProperties(net.minecraft.util.context.ContextMap.Builder propertiesBuilder) {
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillRootTransformProperty(propertiesBuilder, this.rootTransform);
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillRenderTypeProperty(propertiesBuilder, this.renderTypeGroup);
+        net.neoforged.neoforge.client.model.NeoForgeModelProperties.fillPartVisibilityProperty(propertiesBuilder, this.partVisibility);
+    }
+
     @OnlyIn(Dist.CLIENT)
     public static class Deserializer implements JsonDeserializer<BlockModel> {
         public BlockModel deserialize(JsonElement p_111498_, Type p_111499_, JsonDeserializationContext p_111500_) throws JsonParseException {
@@ -63,7 +_,12 @@
             }
 
             ResourceLocation resourcelocation = s.isEmpty() ? null : ResourceLocation.parse(s);
-            return new BlockModel(unbakedgeometry, unbakedmodel$guilight, obool, itemtransforms, textureslots$data, resourcelocation);
+
+            var rootTransform = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializeRootTransform(jsonobject, p_111500_);
+            var renderTypeGroup = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializeRenderType(jsonobject);
+            var partVisibility = net.neoforged.neoforge.client.model.NeoForgeModelProperties.deserializePartVisibility(jsonobject);
+
+            return new BlockModel(unbakedgeometry, unbakedmodel$guilight, obool, itemtransforms, textureslots$data, resourcelocation, rootTransform, renderTypeGroup, partVisibility);
         }
 
         private TextureSlots.Data getTextureMap(JsonObject p_111510_) {
