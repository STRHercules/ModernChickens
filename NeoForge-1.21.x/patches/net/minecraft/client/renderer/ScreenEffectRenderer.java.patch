--- a/net/minecraft/client/renderer/ScreenEffectRenderer.java
+++ b/net/minecraft/client/renderer/ScreenEffectRenderer.java
@@ -59,19 +_,22 @@
         Player player = this.minecraft.player;
         if (this.minecraft.options.getCameraType().isFirstPerson() && !p_416461_) {
             if (!player.noPhysics) {
-                BlockState blockstate = getViewBlockingState(player);
-                if (blockstate != null) {
-                    renderTex(this.minecraft.getBlockRenderer().getBlockModelShaper().getParticleIcon(blockstate), posestack, this.bufferSource);
+                org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> overlay = getOverlayBlock(player);
+                if (overlay != null && !net.neoforged.neoforge.client.ClientHooks.renderBlockOverlay(player, posestack, net.neoforged.neoforge.client.event.RenderBlockScreenEffectEvent.OverlayType.BLOCK, overlay.getLeft(), overlay.getRight())) {
+                    renderTex(this.minecraft.getBlockRenderer().getBlockModelShaper().getParticleIcon(overlay.getLeft(), this.minecraft.level, overlay.getRight()), posestack, this.bufferSource);
                 }
             }
 
             if (!this.minecraft.player.isSpectator()) {
                 if (this.minecraft.player.isEyeInFluid(FluidTags.WATER)) {
+                    if (!net.neoforged.neoforge.client.ClientHooks.renderWaterOverlay(player, posestack))
                     renderWater(this.minecraft, posestack, this.bufferSource);
                 }
+                else if (!player.getEyeInFluidType().isAir()) net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(player.getEyeInFluidType()).renderOverlay(this.minecraft, posestack, this.bufferSource);
 
                 if (this.minecraft.player.isOnFire()) {
                     TextureAtlasSprite textureatlassprite = this.materials.get(ModelBakery.FIRE_1);
+                    if (!net.neoforged.neoforge.client.ClientHooks.renderFireOverlay(player, posestack))
                     renderFire(posestack, this.bufferSource, textureatlassprite);
                 }
             }
@@ -123,6 +_,11 @@
 
     @Nullable
     private static BlockState getViewBlockingState(Player p_110717_) {
+        return getOverlayBlock(p_110717_).getLeft();
+    }
+
+    @Nullable
+    private static org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> getOverlayBlock(Player p_110717_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
         for (int i = 0; i < 8; i++) {
@@ -132,7 +_,7 @@
             blockpos$mutableblockpos.set(d0, d1, d2);
             BlockState blockstate = p_110717_.level().getBlockState(blockpos$mutableblockpos);
             if (blockstate.getRenderShape() != RenderShape.INVISIBLE && blockstate.isViewBlocking(p_110717_.level(), blockpos$mutableblockpos)) {
-                return blockstate;
+                return org.apache.commons.lang3.tuple.Pair.of(blockstate, blockpos$mutableblockpos.immutable());
             }
         }
 
@@ -160,6 +_,10 @@
     }
 
     private static void renderWater(Minecraft p_110726_, PoseStack p_110727_, MultiBufferSource p_383128_) {
+        renderFluid(p_110726_, p_110727_, p_383128_, UNDERWATER_LOCATION);
+    }
+
+    public static void renderFluid(Minecraft p_110726_, PoseStack p_110727_, MultiBufferSource p_383128_, ResourceLocation texture) {
         BlockPos blockpos = BlockPos.containing(p_110726_.player.getX(), p_110726_.player.getEyeY(), p_110726_.player.getZ());
         float f = LightTexture.getBrightness(p_110726_.player.level().dimensionType(), p_110726_.player.level().getMaxLocalRawBrightness(blockpos));
         int i = ARGB.colorFromFloat(0.1F, f, f, f);
@@ -172,7 +_,7 @@
         float f7 = -p_110726_.player.getYRot() / 64.0F;
         float f8 = p_110726_.player.getXRot() / 64.0F;
         Matrix4f matrix4f = p_110727_.last().pose();
-        VertexConsumer vertexconsumer = p_383128_.getBuffer(RenderType.blockScreenEffect(UNDERWATER_LOCATION));
+        VertexConsumer vertexconsumer = p_383128_.getBuffer(RenderType.blockScreenEffect(texture));
         vertexconsumer.addVertex(matrix4f, -1.0F, -1.0F, -0.5F).setUv(4.0F + f7, 4.0F + f8).setColor(i);
         vertexconsumer.addVertex(matrix4f, 1.0F, -1.0F, -0.5F).setUv(0.0F + f7, 4.0F + f8).setColor(i);
         vertexconsumer.addVertex(matrix4f, 1.0F, 1.0F, -0.5F).setUv(0.0F + f7, 0.0F + f8).setColor(i);
