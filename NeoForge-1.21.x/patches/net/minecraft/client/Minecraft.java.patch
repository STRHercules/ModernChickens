--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -441,7 +_,6 @@
             }
         }, Util.nonCriticalIoPool());
         LOGGER.info("Setting user: {}", this.user.getName());
-        LOGGER.debug("(Session ID is {})", this.user.getSessionId());
         this.demo = p_91084_.game.demo;
         this.allowsMultiplayer = !p_91084_.game.disableMultiplayer;
         this.allowsChat = !p_91084_.game.disableChat;
@@ -493,20 +_,24 @@
             LOGGER.error("Couldn't set icon", (Throwable)ioexception);
         }
 
+        // FORGE: Move mouse and keyboard handler setup further below
         this.mouseHandler = new MouseHandler(this);
-        this.mouseHandler.setup(this.window);
         this.keyboardHandler = new KeyboardHandler(this);
-        this.keyboardHandler.setup(this.window);
+        // Neo: Enable GL debug labels and synchronous GL debug output via FML config
+        boolean enableGlDebug = net.neoforged.fml.loading.FMLConfig.getBoolConfigValue(net.neoforged.fml.loading.FMLConfig.ConfigValue.DEBUG_OPENGL);
         RenderSystem.initRenderer(
             this.window.handle(),
             this.options.glDebugVerbosity,
-            SharedConstants.DEBUG_SYNCHRONOUS_GL_LOGS,
+            SharedConstants.DEBUG_SYNCHRONOUS_GL_LOGS || enableGlDebug,
             (p_408948_, p_408949_) -> this.getShaderManager().getShader(p_408948_, p_408949_),
-            p_91084_.game.renderDebugLabels
+            p_91084_.game.renderDebugLabels || enableGlDebug
         );
         LOGGER.info("Using optional rendering extensions: {}", String.join(", ", RenderSystem.getDevice().getEnabledExtensions()));
-        this.mainRenderTarget = new MainTarget(this.window.getWidth(), this.window.getHeight());
+        this.mainRenderTarget = net.neoforged.neoforge.client.ClientHooks.instantiateMainTarget(this.window.getWidth(), this.window.getHeight());
         this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+        net.neoforged.neoforge.client.loading.ClientModLoader.finish(this.resourcePackRepository, this.resourceManager);
+        //Move client bootstrap to after mod loading so that events can be fired for it.
+        ClientBootstrap.bootstrap();
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode, p_344151_ -> {
@@ -545,6 +_,7 @@
         RenderSystem.setupDefaultState();
         this.window.setErrorSection("Post startup");
         this.blockColors = BlockColors.createDefault();
+        net.neoforged.neoforge.client.model.UnbakedModelParser.init();
         this.modelManager = new ModelManager(this.blockColors, this.atlasManager, this.playerSkinRenderCache);
         this.resourceManager.registerReloadListener(this.modelManager);
         EquipmentAssetManager equipmentassetmanager = new EquipmentAssetManager();
@@ -605,6 +_,7 @@
         this.resourceManager.registerReloadListener(this.particleResources);
         this.particleEngine = new ParticleEngine(this.level, this.particleResources);
         this.particleResources.onReload(this.particleEngine::clearParticles);
+        net.neoforged.neoforge.client.ClientHooks.onRegisterParticleProviders(this.particleResources);
         this.waypointStyles = new WaypointStyleManager();
         this.resourceManager.registerReloadListener(this.waypointStyles);
         this.gameRenderer = new GameRenderer(this, this.entityRenderDispatcher.getItemInHandRenderer(), this.renderBuffers, this.blockRenderer);
@@ -621,6 +_,9 @@
         this.gpuWarnlistManager = new GpuWarnlistManager();
         this.resourceManager.registerReloadListener(this.gpuWarnlistManager);
         this.resourceManager.registerReloadListener(this.regionalCompliancies);
+        // NEO: Moved keyboard and mouse handler setup below ingame gui creation to prevent NPEs in them.
+        this.mouseHandler.setup(this.window);
+        this.keyboardHandler.setup(this.window);
         this.gui = new Gui(this);
         RealmsClient realmsclient = RealmsClient.getOrCreate(this);
         this.realmsDataFetcher = new RealmsDataFetcher(realmsclient);
@@ -654,6 +_,7 @@
             }
         }
 
+        net.neoforged.neoforge.client.ClientHooks.initClientHooks(this, this.resourceManager);
         this.window.updateVsync(this.options.enableVsync().get());
         this.window.updateRawMouseInput(this.options.rawMouseInput().get());
         this.window.setAllowCursorChanges(this.options.allowCursorChanges().get());
@@ -680,9 +_,9 @@
         GameLoadTimesEvent.INSTANCE.beginStep(TelemetryProperty.LOAD_TIME_LOADING_OVERLAY_MS);
         Minecraft.GameLoadCookie minecraft$gameloadcookie = new Minecraft.GameLoadCookie(realmsclient, p_91084_.quickPlay);
         this.setOverlay(
-            new LoadingOverlay(
+            net.neoforged.neoforge.client.ClientHooks.createLoadingOverlay(
                 this, reloadinstance, p_299779_ -> Util.ifElse(p_299779_, p_299772_ -> this.rollbackResourcePacks(p_299772_, minecraft$gameloadcookie), () -> {
-                    if (SharedConstants.IS_RUNNING_IN_IDE) {
+                    if (SharedConstants.IS_RUNNING_IN_IDE && false /* Neo: Disable self-test */) {
                         this.selfTest();
                     }
 
@@ -719,6 +_,7 @@
     }
 
     private void onResourceLoadFinished(@Nullable Minecraft.GameLoadCookie p_299896_) {
+        net.neoforged.neoforge.client.ClientHooks.fireResourceLoadFinishedEvent(!this.gameLoadFinished);
         if (!this.gameLoadFinished) {
             this.gameLoadFinished = true;
             this.onGameLoadFinished(p_299896_);
@@ -755,6 +_,8 @@
             runnable = () -> this.setScreen(screen);
         }
 
+        runnable = net.neoforged.neoforge.client.loading.ClientModLoader.completeModLoading(runnable);
+
         return runnable;
     }
 
@@ -807,7 +_,7 @@
     private String createTitle() {
         StringBuilder stringbuilder = new StringBuilder("Minecraft");
         if (checkModStatus().shouldReportAsModified()) {
-            stringbuilder.append("*");
+            stringbuilder.append(' ').append(net.neoforged.neoforge.forge.snapshots.ForgeSnapshotsMod.BRANDING_NAME).append('*');
         }
 
         stringbuilder.append(" ");
@@ -843,7 +_,7 @@
     }
 
     private void rollbackResourcePacks(Throwable p_91240_, @Nullable Minecraft.GameLoadCookie p_299846_) {
-        if (this.resourcePackRepository.getSelectedIds().size() > 1) {
+        if (this.resourcePackRepository.getSelectedPacks().stream().anyMatch(e -> !e.isRequired())) { //Forge: This caused infinite loop if any resource packs are forced. Such as mod resources. So check if we can disable any.
             this.clearResourcePacksOnError(p_91240_, null, p_299846_);
         } else {
             Util.throwAsRuntime(p_91240_);
@@ -899,6 +_,8 @@
         DiscontinuousFrame discontinuousframe = TracyClient.createDiscontinuousFrame("Client Tick");
 
         try {
+            net.neoforged.neoforge.client.ClientLifecycleHooks.handleClientStarted(this);
+
             boolean flag = false;
 
             while (this.running) {
@@ -1002,7 +_,7 @@
             p_307414_.soundManager.emergencyShutdown();
         }
 
-        System.exit(i);
+        net.neoforged.neoforge.server.ServerLifecycleHooks.handleExit(i);
     }
 
     public boolean isEnforceUnicode() {
@@ -1129,9 +_,7 @@
             LOGGER.error("setScreen called from non-game thread");
         }
 
-        if (this.screen != null) {
-            this.screen.removed();
-        } else {
+        if (this.screen == null) {
             this.setLastInputType(InputType.NONE);
         }
 
@@ -1153,6 +_,19 @@
             }
         }
 
+        net.neoforged.neoforge.client.ClientHooks.clearGuiLayers(this);
+        Screen old = this.screen;
+        if (p_91153_ != null) {
+            var event = new net.neoforged.neoforge.client.event.ScreenEvent.Opening(old, p_91153_);
+            if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+            p_91153_ = event.getNewScreen();
+        }
+
+        if (old != null && p_91153_ != old) {
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.client.event.ScreenEvent.Closing(old));
+            old.removed();
+        }
+
         this.screen = p_91153_;
         if (this.screen != null) {
             this.screen.added();
@@ -1181,6 +_,7 @@
 
     public void destroy() {
         try {
+            net.neoforged.neoforge.client.ClientLifecycleHooks.handleClientStopping(this);
             LOGGER.info("Stopping!");
 
             try {
@@ -1202,6 +_,7 @@
             }
 
             this.close();
+            net.neoforged.neoforge.client.ClientLifecycleHooks.handleClientStopped(this);
         } finally {
             Util.timeSource = System::nanoTime;
             if (this.delayedCrash == null) {
@@ -1299,7 +_,9 @@
         RenderSystem.getDevice().createCommandEncoder().clearColorAndDepthTextures(rendertarget.getColorTexture(), 0, rendertarget.getDepthTexture(), 1.0);
         profilerfiller.push("gameRenderer");
         if (!this.noRender) {
+            net.neoforged.neoforge.client.ClientHooks.fireRenderFramePre(this.deltaTracker);
             this.gameRenderer.render(this.deltaTracker, p_91384_);
+            net.neoforged.neoforge.client.ClientHooks.fireRenderFramePost(this.deltaTracker);
         }
 
         profilerfiller.popPush("blit");
@@ -1331,9 +_,13 @@
         this.window.setErrorSection("Post render");
         this.frames++;
         boolean flag1 = this.pause;
-        this.pause = this.hasSingleplayerServer()
+        boolean pause = this.hasSingleplayerServer()
             && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen())
             && !this.singleplayerServer.isPublished();
+        if (pause != this.pause && !net.neoforged.neoforge.client.ClientHooks.onClientPauseChangePre(pause)) {
+            this.pause = pause;
+            net.neoforged.neoforge.client.ClientHooks.onClientPauseChangePost(pause);
+        }
         if (!flag1 && this.pause) {
             this.soundManager.pauseAllExcept(SoundSource.MUSIC, SoundSource.UI);
         }
@@ -1409,10 +_,13 @@
         this.window.setGuiScale(i);
         if (this.screen != null) {
             this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
+            net.neoforged.neoforge.client.ClientHooks.resizeGuiLayers(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
         }
 
         RenderTarget rendertarget = this.getMainRenderTarget();
+        if (rendertarget != null)
         rendertarget.resize(this.window.getWidth(), this.window.getHeight());
+        if (this.gameRenderer != null)
         this.gameRenderer.resize(this.window.getWidth(), this.window.getHeight());
         this.mouseHandler.setIgnoreFirstMove();
     }
@@ -1552,6 +_,7 @@
     }
 
     public void stop() {
+        if (this.isRunning()) net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.GameShuttingDownEvent());
         this.running = false;
     }
 
@@ -1581,8 +_,16 @@
                 BlockPos blockpos = blockhitresult.getBlockPos();
                 if (!this.level.getBlockState(blockpos).isAir()) {
                     Direction direction = blockhitresult.getDirection();
-                    if (this.gameMode.continueDestroyBlock(blockpos, direction)) {
-                        this.level.addBreakingBlockEffect(blockpos, direction);
+                    var inputEvent = net.neoforged.neoforge.client.ClientHooks.onClickInput(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+                    if (inputEvent.isCanceled()) {
+                        if (inputEvent.shouldSwingHand()) {
+                            this.level.addBreakingBlockEffect(blockpos, direction, blockhitresult);
+                            this.player.swing(InteractionHand.MAIN_HAND);
+                        }
+                        return;
+                    }
+                    if (this.gameMode.continueDestroyBlock(blockpos, direction) && inputEvent.shouldSwingHand()) {
+                        this.level.addBreakingBlockEffect(blockpos, direction, blockhitresult);
                         this.player.swing(InteractionHand.MAIN_HAND);
                     }
                 }
@@ -1610,6 +_,8 @@
                 return false;
             } else {
                 boolean flag = false;
+                var inputEvent = net.neoforged.neoforge.client.ClientHooks.onClickInput(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+                if (!inputEvent.isCanceled())
                 switch (this.hitResult.getType()) {
                     case ENTITY:
                         this.gameMode.attack(this.player, ((EntityHitResult)this.hitResult).getEntity());
@@ -1630,8 +_,10 @@
                         }
 
                         this.player.resetAttackStrengthTicker();
+                        net.neoforged.neoforge.common.CommonHooks.onEmptyLeftClick(this.player);
                 }
 
+                if (inputEvent.shouldSwingHand())
                 this.player.swing(InteractionHand.MAIN_HAND);
                 return flag;
             }
@@ -1647,6 +_,11 @@
                 }
 
                 for (InteractionHand interactionhand : InteractionHand.values()) {
+                    var inputEvent = net.neoforged.neoforge.client.ClientHooks.onClickInput(1, this.options.keyUse, interactionhand);
+                    if (inputEvent.isCanceled()) {
+                        if (inputEvent.shouldSwingHand()) this.player.swing(interactionhand);
+                        return;
+                    }
                     ItemStack itemstack = this.player.getItemInHand(interactionhand);
                     if (!itemstack.isItemEnabled(this.level.enabledFeatures())) {
                         return;
@@ -1667,7 +_,7 @@
                                 }
 
                                 if (interactionresult instanceof InteractionResult.Success interactionresult$success2) {
-                                    if (interactionresult$success2.swingSource() == InteractionResult.SwingSource.CLIENT) {
+                                    if (interactionresult$success2.swingSource() == InteractionResult.SwingSource.CLIENT && inputEvent.shouldSwingHand()) {
                                         this.player.swing(interactionhand);
                                     }
 
@@ -1679,7 +_,7 @@
                                 int i = itemstack.getCount();
                                 InteractionResult interactionresult1 = this.gameMode.useItemOn(this.player, interactionhand, blockhitresult);
                                 if (interactionresult1 instanceof InteractionResult.Success interactionresult$success) {
-                                    if (interactionresult$success.swingSource() == InteractionResult.SwingSource.CLIENT) {
+                                    if (interactionresult$success.swingSource() == InteractionResult.SwingSource.CLIENT && inputEvent.shouldSwingHand()) {
                                         this.player.swing(interactionhand);
                                         if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.player.hasInfiniteMaterials())) {
                                             this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
@@ -1695,6 +_,9 @@
                         }
                     }
 
+                    if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                        net.neoforged.neoforge.common.CommonHooks.onEmptyClick(this.player, interactionhand);
+
                     if (!itemstack.isEmpty()
                         && this.gameMode.useItem(this.player, interactionhand) instanceof InteractionResult.Success interactionresult$success1) {
                         if (interactionresult$success1.swingSource() == InteractionResult.SwingSource.CLIENT) {
@@ -1715,6 +_,10 @@
 
     public void tick() {
         this.clientTickCount++;
+        if (this.gameLoadFinished) {
+            net.neoforged.neoforge.client.ClientHooks.fireClientTickPre();
+        }
+
         if (this.level != null && !this.pause) {
             this.level.tickRateManager().tick();
         }
@@ -1809,6 +_,7 @@
 
                 this.tutorial.tick();
 
+                net.neoforged.neoforge.event.EventHooks.fireLevelTickPre(this.level, () -> true);
                 try {
                     this.level.tick(() -> true);
                 } catch (Throwable throwable1) {
@@ -1822,6 +_,7 @@
 
                     throw new ReportedException(crashreport1);
                 }
+                net.neoforged.neoforge.event.EventHooks.fireLevelTickPost(this.level, () -> true);
             }
 
             profilerfiller.popPush("animateTick");
@@ -1846,6 +_,10 @@
         profilerfiller.popPush("keyboard");
         this.keyboardHandler.tick();
         profilerfiller.pop();
+
+        if (this.gameLoadFinished) {
+            net.neoforged.neoforge.client.ClientHooks.fireClientTickPost();
+        }
     }
 
     private boolean isLevelRunningNormally() {
@@ -2062,6 +_,7 @@
     }
 
     public void setLevel(ClientLevel p_91157_) {
+        if (this.level != null) net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Unload(this.level));
         this.level = p_91157_;
         this.updateLevelInEngines(p_91157_);
     }
@@ -2115,13 +_,16 @@
         IntegratedServer integratedserver = this.singleplayerServer;
         this.singleplayerServer = null;
         this.gameRenderer.resetData();
+        net.neoforged.neoforge.client.ClientHooks.firePlayerLogout(this.gameMode, this.player);
         this.gameMode = null;
         this.narrator.clear();
         this.clientLevelTeardownInProgress = true;
 
+        var shouldRevertRegistriesToFrozen = this.getConnection() != null && this.getConnection().getConnection() != null; // Neo: Track whether to revert registries after disconnect
         try {
             if (this.level != null) {
                 this.gui.onDisconnected();
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Unload(this.level));
             }
 
             if (integratedserver != null) {
@@ -2144,6 +_,7 @@
         } finally {
             this.clientLevelTeardownInProgress = false;
         }
+        if(shouldRevertRegistriesToFrozen) net.neoforged.neoforge.registries.RegistryManager.revertToFrozen(); // Neo: Revert registries to frozen on disconnect
     }
 
     public void clearDownloadedResourcePacks() {
@@ -2275,6 +_,7 @@
 
     private void pickBlock() {
         if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS) {
+            if (net.neoforged.neoforge.client.ClientHooks.onClickInput(2, this.options.keyPickItem, InteractionHand.MAIN_HAND).isCanceled()) return;
             boolean flag = this.hasControlDown();
             switch (this.hitResult) {
                 case BlockHitResult blockhitresult:
