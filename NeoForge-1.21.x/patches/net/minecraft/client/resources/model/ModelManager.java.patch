--- a/net/minecraft/client/resources/model/ModelManager.java
+++ b/net/minecraft/client/resources/model/ModelManager.java
@@ -66,6 +_,9 @@
     private SpecialBlockModelRenderer specialBlockModelRenderer = SpecialBlockModelRenderer.EMPTY;
     private ModelBakery.MissingModels missingModels;
     private Object2IntMap<BlockState> modelGroups = Object2IntMaps.emptyMap();
+    private final java.util.concurrent.atomic.AtomicReference<ModelBakery> modelBakery = new java.util.concurrent.atomic.AtomicReference<>(null);
+    private net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.BakedModels bakedStandaloneModels;
+    private Set<ResourceLocation> reportedMissingItemModels = new java.util.HashSet<>();
 
     public ModelManager(BlockColors p_119407_, AtlasManager p_434259_, PlayerSkinRenderCache p_440151_) {
         this.blockColors = p_119407_;
@@ -79,7 +_,14 @@
     }
 
     public ItemModel getItemModel(ResourceLocation p_387691_) {
-        return this.bakedItemStackModels.getOrDefault(p_387691_, this.missingModels.item());
+        ItemModel model = this.bakedItemStackModels.get(p_387691_);
+        if (model == null) {
+            if (this.reportedMissingItemModels.add(p_387691_)) {
+                LOGGER.warn("Missing item model for location {}", p_387691_);
+            }
+            return this.missingModels.item();
+        }
+        return model;
     }
 
     public ClientItem.Properties getItemProperties(ResourceLocation p_390438_) {
@@ -96,17 +_,20 @@
     ) {
         ResourceManager resourcemanager = p_433049_.resourceManager();
         CompletableFuture<EntityModelSet> completablefuture = CompletableFuture.supplyAsync(EntityModelSet::vanilla, p_250550_);
+        var pendingAnimations = p_433049_.get(net.neoforged.neoforge.client.entity.animation.json.AnimationLoader.STATE_KEY);
         CompletableFuture<SpecialBlockModelRenderer> completablefuture1 = completablefuture.thenApplyAsync(
             p_438833_ -> SpecialBlockModelRenderer.vanilla(
-                new SpecialModelRenderer.BakingContext.Simple(p_438833_, this.atlasManager, this.playerSkinRenderCache)
+                new SpecialModelRenderer.BakingContext.Simple(p_438833_, this.atlasManager, this.playerSkinRenderCache, pendingAnimations)
             ),
             p_250550_
         );
         CompletableFuture<Map<ResourceLocation, UnbakedModel>> completablefuture2 = loadBlockModels(resourcemanager, p_250550_);
         CompletableFuture<BlockStateModelLoader.LoadedModels> completablefuture3 = BlockStateModelLoader.loadBlockStates(resourcemanager, p_250550_);
         CompletableFuture<ClientItemInfoLoader.LoadedClientInfos> completablefuture4 = ClientItemInfoLoader.scheduleLoad(resourcemanager, p_250550_);
-        CompletableFuture<ModelManager.ResolvedModels> completablefuture5 = CompletableFuture.allOf(completablefuture2, completablefuture3, completablefuture4)
-            .thenApplyAsync(p_404152_ -> discoverModelDependencies(completablefuture2.join(), completablefuture3.join(), completablefuture4.join()), p_250550_);
+        CompletableFuture<net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.LoadedModels> standaloneModelsFuture =
+                net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.load(p_250550_);
+        CompletableFuture<ModelManager.ResolvedModels> completablefuture5 = CompletableFuture.allOf(completablefuture2, completablefuture3, completablefuture4, standaloneModelsFuture)
+            .thenApplyAsync(p_404152_ -> discoverModelDependencies(completablefuture2.join(), completablefuture3.join(), completablefuture4.join(), standaloneModelsFuture.join()), p_250550_);
         CompletableFuture<Object2IntMap<BlockState>> completablefuture6 = completablefuture3.thenApplyAsync(
             p_359309_ -> buildModelGroups(this.blockColors, p_359309_), p_250550_
         );
@@ -120,6 +_,7 @@
                 completablefuture,
                 completablefuture1,
                 completablefuture2
+                , standaloneModelsFuture
             )
             .thenComposeAsync(
                 p_438832_ -> {
@@ -139,7 +_,10 @@
                         completablefuture4.join().contents(),
                         modelmanager$resolvedmodels.models(),
                         modelmanager$resolvedmodels.missing()
+                        , standaloneModelsFuture.join(),
+                        pendingAnimations
                     );
+                    this.modelBakery.set(modelbakery);
                     return loadModels(spriteloader$preparations, modelbakery, object2intmap, completablefuture.join(), completablefuture1.join(), p_250550_);
                 },
                 p_250550_
@@ -152,7 +_,7 @@
         return CompletableFuture.<Map<ResourceLocation, Resource>>supplyAsync(() -> MODEL_LISTER.listMatchingResources(p_251361_), p_252189_)
             .thenCompose(
                 p_250597_ -> {
-                    List<CompletableFuture<Pair<ResourceLocation, BlockModel>>> list = new ArrayList<>(p_250597_.size());
+                    List<CompletableFuture<Pair<ResourceLocation, UnbakedModel>>> list = new ArrayList<>(p_250597_.size());
 
                     for (Entry<ResourceLocation, Resource> entry : p_250597_.entrySet()) {
                         list.add(CompletableFuture.supplyAsync(() -> {
@@ -161,7 +_,7 @@
                             try {
                                 Pair pair;
                                 try (Reader reader = entry.getValue().openAsReader()) {
-                                    pair = Pair.of(resourcelocation, BlockModel.fromStream(reader));
+                                    pair = Pair.of(resourcelocation, net.neoforged.neoforge.client.model.UnbakedModelParser.parse(reader));
                                 }
 
                                 return pair;
@@ -180,15 +_,26 @@
             );
     }
 
+    /**
+     * @deprecated Neo: use {@link #discoverModelDependencies(Map, BlockStateModelLoader.LoadedModels, ClientItemInfoLoader.LoadedClientInfos, net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.LoadedModels)} instead
+     */
+    @Deprecated
     private static ModelManager.ResolvedModels discoverModelDependencies(
         Map<ResourceLocation, UnbakedModel> p_363228_, BlockStateModelLoader.LoadedModels p_361624_, ClientItemInfoLoader.LoadedClientInfos p_390496_
     ) {
+        return discoverModelDependencies(p_363228_, p_361624_, p_390496_, net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.LoadedModels.EMPTY);
+    }
+
+    private static ModelManager.ResolvedModels discoverModelDependencies(
+            Map<ResourceLocation, UnbakedModel> p_363228_, BlockStateModelLoader.LoadedModels p_361624_, ClientItemInfoLoader.LoadedClientInfos p_390496_, net.neoforged.neoforge.client.model.standalone.StandaloneModelLoader.LoadedModels standaloneModels
+    ) {
         ModelManager.ResolvedModels modelmanager$resolvedmodels;
         try (Zone zone = Profiler.get().zone("dependencies")) {
             ModelDiscovery modeldiscovery = new ModelDiscovery(p_363228_, MissingBlockModel.missingModel());
             modeldiscovery.addSpecialModel(ItemModelGenerator.GENERATED_ITEM_MODEL_ID, new ItemModelGenerator());
             p_361624_.models().values().forEach(modeldiscovery::addRoot);
             p_390496_.contents().values().forEach(p_390109_ -> modeldiscovery.addRoot(p_390109_.model()));
+            standaloneModels.models().values().forEach(modeldiscovery::addRoot);
             modelmanager$resolvedmodels = new ModelManager.ResolvedModels(modeldiscovery.missingModel(), modeldiscovery.resolve());
         }
 
@@ -248,6 +_,9 @@
                                 p_386267_.stream().sorted().map(p_386265_ -> "    " + p_386265_).collect(Collectors.joining("\n"))
                             )
                         );
+                    try (Zone ignored = Profiler.get().zone("neoforge_modify_baking_result")) {
+                        net.neoforged.neoforge.client.ClientHooks.onModifyBakingResult(p_432333_, p_434753_, p_248945_);
+                    }
                     Map<BlockState, BlockStateModel> map = createBlockStateToModelDispatch(p_432333_.blockStateModels(), p_432333_.missingModels().block());
                     return new ModelManager.ReloadState(p_432333_, p_363498_, map, p_388110_, p_387466_);
                 }
@@ -288,6 +_,16 @@
         this.itemProperties = modelbakery$bakingresult.itemProperties();
         this.modelGroups = p_248996_.modelGroups;
         this.missingModels = modelbakery$bakingresult.missingModels();
+        this.bakedStandaloneModels = modelbakery$bakingresult.standaloneModels();
+        net.neoforged.neoforge.client.ClientHooks.onModelBake(this, modelbakery$bakingresult, this.modelBakery.get());
+        this.reportedMissingItemModels = new java.util.HashSet<>();
+        for (net.minecraft.world.item.Item item : BuiltInRegistries.ITEM) {
+            ResourceLocation modelId = item.components().get(net.minecraft.core.component.DataComponents.ITEM_MODEL);
+            if (modelId != null && !this.bakedItemStackModels.containsKey(modelId)) {
+                this.reportedMissingItemModels.add(modelId);
+                LOGGER.warn("No model loaded for default item model ID {} of {}", modelId, item);
+            }
+        }
         this.blockModelShaper.replaceCache(p_248996_.modelCache);
         this.specialBlockModelRenderer = p_248996_.specialBlockModelRenderer;
         this.entityModelSet = p_248996_.entityModelSet;
@@ -317,6 +_,15 @@
 
     public Supplier<EntityModelSet> entityModels() {
         return () -> this.entityModelSet;
+    }
+
+    public ModelBakery getModelBakery() {
+        return this.modelBakery.get();
+    }
+
+    @org.jetbrains.annotations.Nullable
+    public <T> T getStandaloneModel(net.neoforged.neoforge.client.model.standalone.StandaloneModelKey<T> modelKey) {
+        return this.bakedStandaloneModels.get(modelKey);
     }
 
     @OnlyIn(Dist.CLIENT)
