--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -779,9 +_,10 @@
             }
         },
         new OptionInstance.LazyEnum<>(
+            // FORGE: fix incorrect string comparison - PR #8767
             () -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(),
             p_232011_ -> Minecraft.getInstance().isRunning()
-                    && p_232011_ != ""
+                    && (p_232011_ == null || !p_232011_.isEmpty())
                     && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(p_232011_)
                 ? Optional.empty()
                 : Optional.of(p_232011_),
@@ -879,7 +_,7 @@
         this.incompatibleResourcePacks.clear();
 
         for (Pack pack : p_275268_.getSelectedPacks()) {
-            if (!pack.isFixedPosition()) {
+            if (!pack.isFixedPosition() && !pack.isHidden()) {
                 this.resourcePacks.add(pack.getId());
                 if (!pack.getCompatibility().isCompatible()) {
                     this.incompatibleResourcePacks.add(pack.getId());
@@ -1227,6 +_,7 @@
     }
 
     public Options(Minecraft p_92138_, File p_92139_) {
+        setForgeKeybindProperties();
         this.minecraft = p_92138_;
         this.optionsFile = new File(p_92139_, "options.txt");
         boolean flag = Runtime.getRuntime().maxMemory() >= 1000000000L;
@@ -1247,6 +_,7 @@
             p_426141_ -> {}
         );
         this.syncWrites = Util.getPlatform() == Util.OS.WINDOWS;
+        net.neoforged.neoforge.client.ClientHooks.onRegisterKeyMappings(this, KeyMapping.Category.SORT_ORDER);
         this.load();
     }
 
@@ -1371,10 +_,14 @@
         p_168428_.process("musicFrequency", this.musicFrequency);
 
         for (KeyMapping keymapping : this.keyMappings) {
-            String s = keymapping.saveString();
+            String s = keymapping.saveString() + (keymapping.getKeyModifier() != net.neoforged.neoforge.client.settings.KeyModifier.NONE ? ":" + keymapping.getKeyModifier() : "");
             String s1 = p_168428_.process("key_" + keymapping.getName(), s);
             if (!s.equals(s1)) {
-                keymapping.setKey(InputConstants.getKey(s1));
+                if (s1.indexOf(':') != -1) {
+                    String[] pts = s1.split(":");
+                    keymapping.setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier.valueFromString(pts[1]), InputConstants.getKey(pts[0]));
+                } else
+                    keymapping.setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier.NONE, InputConstants.getKey(s1));
             }
         }
 
@@ -1671,6 +_,23 @@
         }
 
         p_92146_.setSelected(set);
+    }
+
+    private void setForgeKeybindProperties() {
+        net.neoforged.neoforge.client.settings.KeyConflictContext inGame = net.neoforged.neoforge.client.settings.KeyConflictContext.IN_GAME;
+        keyUp.setKeyConflictContext(inGame);
+        keyLeft.setKeyConflictContext(inGame);
+        keyDown.setKeyConflictContext(inGame);
+        keyRight.setKeyConflictContext(inGame);
+        keyJump.setKeyConflictContext(inGame);
+        keyShift.setKeyConflictContext(inGame);
+        keySprint.setKeyConflictContext(inGame);
+        keyAttack.setKeyConflictContext(inGame);
+        keyChat.setKeyConflictContext(inGame);
+        keyPlayerList.setKeyConflictContext(inGame);
+        keyCommand.setKeyConflictContext(inGame);
+        keyTogglePerspective.setKeyConflictContext(inGame);
+        keySmoothCamera.setKeyConflictContext(inGame);
     }
 
     public CameraType getCameraType() {
