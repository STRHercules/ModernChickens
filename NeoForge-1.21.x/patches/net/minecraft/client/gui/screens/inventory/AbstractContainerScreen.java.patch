--- a/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ b/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -117,6 +_,7 @@
             this.onStopHovering(slot);
         }
 
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.client.event.ContainerScreenEvent.Render.Foreground(this, p_418314_, p_418170_, p_418114_));
         p_418314_.pose().popMatrix();
     }
 
@@ -203,6 +_,7 @@
                     this.font,
                     this.getTooltipFromContainerItem(itemstack),
                     itemstack.getTooltipImage(),
+                    itemstack,
                     p_282171_,
                     p_281909_,
                     itemstack.get(DataComponents.TOOLTIP_STYLE)
@@ -221,7 +_,8 @@
 
     private void renderFloatingItem(GuiGraphics p_282567_, ItemStack p_281330_, int p_281772_, int p_281689_, @Nullable String p_282568_) {
         p_282567_.renderItem(p_281330_, p_281772_, p_281689_);
-        p_282567_.renderItemDecorations(this.font, p_281330_, p_281772_, p_281689_ - (this.draggingItem.isEmpty() ? 0 : 8), p_282568_);
+        var font = net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(p_281330_).getFont(p_281330_, net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.FontContext.ITEM_COUNT);
+        p_282567_.renderItemDecorations(font != null ? font : this.font, p_281330_, p_281772_, p_281689_ - (this.draggingItem.isEmpty() ? 0 : 8), p_282568_);
     }
 
     protected void renderLabels(GuiGraphics p_281635_, int p_282681_, int p_283686_) {
@@ -276,6 +_,13 @@
                 p_281607_.fill(i, j, i + 16, j + 16, -2130706433);
             }
 
+            renderSlotContents(p_281607_, itemstack, p_282613_, s);
+        }
+    }
+
+    protected void renderSlotContents(GuiGraphics guiGraphics, ItemStack itemstack, Slot slot, @Nullable String countString) {
+        {
+            GuiGraphics p_281607_ = guiGraphics; Slot p_282613_ = slot; String s = countString; int i = slot.x; int j = slot.y;
             int j1 = p_282613_.x + p_282613_.y * this.imageWidth;
             if (p_282613_.isFake()) {
                 p_281607_.renderFakeItem(itemstack, i, j, j1);
@@ -283,7 +_,8 @@
                 p_281607_.renderItem(itemstack, i, j, j1);
             }
 
-            p_281607_.renderItemDecorations(this.font, itemstack, i, j, s);
+            var font = net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(itemstack).getFont(itemstack, net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.FontContext.ITEM_COUNT);
+            p_281607_.renderItemDecorations(font != null ? font : this.font, itemstack, i, j, s);
         }
     }
 
@@ -322,7 +_,8 @@
         if (super.mouseClicked(p_446548_, p_432883_)) {
             return true;
         } else {
-            boolean flag = this.minecraft.options.keyPickItem.matchesMouse(p_446548_) && this.minecraft.player.hasInfiniteMaterials();
+            var mouseKey = com.mojang.blaze3d.platform.InputConstants.Type.MOUSE.getOrCreate(p_446548_.button());
+            boolean flag = this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey);
             Slot slot = this.getHoveredSlot(p_446548_.x(), p_446548_.y());
             this.doubleclick = this.lastClickSlot == slot && p_432883_;
             this.skipNextRelease = false;
@@ -332,6 +_,7 @@
                 int i = this.leftPos;
                 int j = this.topPos;
                 boolean flag1 = this.hasClickedOutside(p_446548_.x(), p_446548_.y(), i, j);
+                if (slot != null) flag1 = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
                 int k = -1;
                 if (slot != null) {
                     k = slot.index;
@@ -357,7 +_,7 @@
                         }
                     } else if (!this.isQuickCrafting) {
                         if (this.menu.getCarried().isEmpty()) {
-                            if (flag) {
+                            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                                 this.slotClicked(slot, k, p_446548_.button(), ClickType.CLONE);
                             } else {
                                 boolean flag2 = k != -999 && p_446548_.hasShiftDown();
@@ -381,7 +_,7 @@
                                 this.quickCraftingType = 0;
                             } else if (p_446548_.button() == 1) {
                                 this.quickCraftingType = 1;
-                            } else if (flag) {
+                            } else if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                                 this.quickCraftingType = 2;
                             }
                         }
@@ -458,10 +_,13 @@
 
     @Override
     public boolean mouseReleased(MouseButtonEvent p_446114_) {
+        super.mouseReleased(p_446114_); //Forge: call parent to release buttons
         Slot slot = this.getHoveredSlot(p_446114_.x(), p_446114_.y());
         int i = this.leftPos;
         int j = this.topPos;
         boolean flag = this.hasClickedOutside(p_446114_.x(), p_446114_.y(), i, j);
+        if (slot != null) flag = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
+        var mouseKey = com.mojang.blaze3d.platform.InputConstants.Type.MOUSE.getOrCreate(p_446114_.button());
         int k = -1;
         if (slot != null) {
             k = slot.index;
@@ -478,7 +_,7 @@
                         if (slot2 != null
                             && slot2.mayPickup(this.minecraft.player)
                             && slot2.hasItem()
-                            && slot2.container == slot.container
+                            && slot2.isSameInventory(slot)
                             && AbstractContainerMenu.canItemQuickReplace(slot2, this.lastQuickMoved, true)) {
                             this.slotClicked(slot2, slot2.index, p_446114_.button(), ClickType.QUICK_MOVE);
                         }
@@ -543,7 +_,7 @@
 
                 this.slotClicked(null, -999, AbstractContainerMenu.getQuickcraftMask(2, this.quickCraftingType), ClickType.QUICK_CRAFT);
             } else if (!this.menu.getCarried().isEmpty()) {
-                if (this.minecraft.options.keyPickItem.matchesMouse(p_446114_)) {
+                if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                     this.slotClicked(slot, k, p_446114_.button(), ClickType.CLONE);
                 } else {
                     boolean flag1 = k != -999 && p_446114_.hasShiftDown();
@@ -612,34 +_,40 @@
 
     @Override
     public boolean keyPressed(KeyEvent p_445387_) {
+        var key = com.mojang.blaze3d.platform.InputConstants.getKey(p_445387_);
         if (super.keyPressed(p_445387_)) {
             return true;
-        } else if (this.minecraft.options.keyInventory.matches(p_445387_)) {
+        } else if (this.minecraft.options.keyInventory.isActiveAndMatches(key)) {
             this.onClose();
             return true;
         } else {
-            this.checkHotbarKeyPressed(p_445387_);
+            boolean handled = this.checkHotbarKeyPressed(p_445387_); // Forge MC-146650: Needs to return true when the key is handled
             if (this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
-                if (this.minecraft.options.keyPickItem.matches(p_445387_)) {
+                if (this.minecraft.options.keyPickItem.isActiveAndMatches(key)) {
                     this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 0, ClickType.CLONE);
-                } else if (this.minecraft.options.keyDrop.matches(p_445387_)) {
+                    handled = true;
+                } else if (this.minecraft.options.keyDrop.isActiveAndMatches(key)) {
                     this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, p_445387_.hasControlDown() ? 1 : 0, ClickType.THROW);
+                    handled = true;
                 }
+            } else if (this.minecraft.options.keyDrop.isActiveAndMatches(key)) {
+                handled = true; // Forge MC-146650: Emulate MC bug, so we don't drop from hotbar when pressing drop without hovering over a item.
             }
 
-            return true;
+            return handled;
         }
     }
 
     protected boolean checkHotbarKeyPressed(KeyEvent p_446813_) {
+        var key = com.mojang.blaze3d.platform.InputConstants.getKey(p_446813_);
         if (this.menu.getCarried().isEmpty() && this.hoveredSlot != null) {
-            if (this.minecraft.options.keySwapOffhand.matches(p_446813_)) {
+            if (this.minecraft.options.keySwapOffhand.isActiveAndMatches(key)) {
                 this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 40, ClickType.SWAP);
                 return true;
             }
 
             for (int i = 0; i < 9; i++) {
-                if (this.minecraft.options.keyHotbarSlots[i].matches(p_446813_)) {
+                if (this.minecraft.options.keyHotbarSlots[i].isActiveAndMatches(key)) {
                     this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, i, ClickType.SWAP);
                     return true;
                 }
@@ -682,6 +_,18 @@
     @Override
     public T getMenu() {
         return this.menu;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    public Slot getSlotUnderMouse() { return this.hoveredSlot; }
+    public int getGuiLeft() { return leftPos; }
+    public int getGuiTop() { return topPos; }
+    public int getXSize() { return imageWidth; }
+    public int getYSize() { return imageHeight; }
+
+    protected int slotColor = -2130706433;
+    public int getSlotColor(int index) {
+        return slotColor;
     }
 
     @Override
