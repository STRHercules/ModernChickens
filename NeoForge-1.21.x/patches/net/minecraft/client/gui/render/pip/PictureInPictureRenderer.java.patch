--- a/net/minecraft/client/gui/render/pip/PictureInPictureRenderer.java
+++ b/net/minecraft/client/gui/render/pip/PictureInPictureRenderer.java
@@ -98,8 +_,10 @@
             this.texture = gpudevice.createTexture(() -> "UI " + this.getTextureLabel() + " texture", 12, TextureFormat.RGBA8, p_415840_, p_415644_, 1, 1);
             this.texture.setTextureFilter(FilterMode.NEAREST, false);
             this.textureView = gpudevice.createTextureView(this.texture);
+            // Neo: copy stencil setting from main target
+            TextureFormat depthFormat = net.minecraft.client.Minecraft.getInstance().getMainRenderTarget().getDepthTexture().getFormat();
             this.depthTexture = gpudevice.createTexture(
-                () -> "UI " + this.getTextureLabel() + " depth texture", 8, TextureFormat.DEPTH32, p_415840_, p_415644_, 1, 1
+                () -> "UI " + this.getTextureLabel() + " depth texture", 8, depthFormat, p_415840_, p_415644_, 1, 1
             );
             this.depthTextureView = gpudevice.createTextureView(this.depthTexture);
         }
@@ -142,4 +_,13 @@
     protected abstract void renderToTexture(T p_415826_, PoseStack p_415928_);
 
     protected abstract String getTextureLabel();
+
+    /**
+     * Neo: This is used to check if this renderer can be reused for a given state, texture width and texture height on
+     * a subsequent frame. In Vanilla, a renderer would be used for multiple different states even within the same frame,
+     * leading to crashes and the last state being used for all blits of that renderer in that frame.
+     */
+    public boolean canBeReusedFor(T state, int textureWidth, int textureHeight) {
+        return texture == null || (texture.getWidth(0) == textureWidth && texture.getHeight(0) == textureHeight);
+    }
 }
